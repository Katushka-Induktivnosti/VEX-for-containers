{"id": "CVE-2011-3172", "package": "suse:pam-modules", "purl": "suse:pam-modules", "package_type": "suse", "package_usage": "N/A", "version": null, "fix_version": "11-1.27.3.1", "severity": "MEDIUM", "cvss_score": "5.0", "short_description": "A vulnerability in pam_modules of SUSE Linux Enterprise allows attackers to log into accounts that should have been disabled. Affected releases are SUSE Linux Enterprise: versions prior to 12.", "related_urls": ["https://www.suse.com/security/cve/CVE-2011-3172.html", "https://bugzilla.suse.com/1149683", "https://bugzilla.suse.com/707645"], "occurrence_count": 0, "reachable_flows": 0}
{"id": "CVE-2023-4039", "package": "suse:libstdc++6", "purl": "suse:libstdc++6", "package_type": "suse", "package_usage": "N/A", "version": null, "fix_version": "13.2.1+git7813-150000.1.6.1", "severity": "HIGH", "cvss_score": "7.5", "short_description": "**DISPUTED**A failure in the -fstack-protector feature in GCC-based toolchains \nthat target AArch64 allows an attacker to exploit an existing buffer \noverflow in dynamically-sized local variables in your application \nwithout this being detected. This stack-protector failure only applies \nto C99-style dynamically-sized local variables or those created using \nalloca(). The stack-protector operates as intended for statically-sized \nlocal variables.\n\nThe default behavior when the stack-protector \ndetects an overflow is to terminate your application, resulting in \ncontrolled loss of availability. An attacker who can exploit a buffer \noverflow without triggering the stack-protector might be able to change \nprogram flow control to cause an uncontrolled loss of availability or to\n go further and affect confidentiality or integrity. NOTE: The GCC project argues that this is a missed hardening bug and not a vulnerability by itself.", "related_urls": ["https://www.suse.com/security/cve/CVE-2023-4039.html", "https://bugzilla.suse.com/1214052"], "occurrence_count": 0, "reachable_flows": 0}
{"id": "CVE-2013-7423", "package": "suse:pam-modules", "purl": "suse:pam-modules", "package_type": "suse", "package_usage": "N/A", "version": null, "fix_version": "11-1.18.1", "severity": "MEDIUM", "cvss_score": "5.0", "short_description": "The send_dg function in resolv/res_send.c in GNU C Library (aka glibc or libc6) before 2.20 does not properly reuse file descriptors, which allows remote attackers to send DNS queries to unintended locations via a large number of requests that trigger a call to the getaddrinfo function.", "related_urls": ["https://www.suse.com/security/cve/CVE-2013-7423.html", "https://bugzilla.suse.com/1123874", "https://bugzilla.suse.com/915526"], "occurrence_count": 0, "reachable_flows": 0}
{"id": "CVE-2022-0563", "package": "debian:util-linux", "purl": "debian:util-linux", "package_type": "debian", "package_usage": "N/A", "version": null, "fix_version": "", "severity": "LOW", "cvss_score": "2.0", "short_description": "A flaw was found in the util-linux chfn and chsh utilities when compil ...\nNOTE: https://bugzilla.redhat.com/show_bug.cgi?id=2053151\nNOTE: https://lore.kernel.org/util-linux/20220214110609.msiwlm457ngoic6w@ws.net.home/T/#u\nNOTE: https://github.com/util-linux/util-linux/commit/faa5a3a83ad0cb5e2c303edbfd8cd823c9d94c17\nNOTE: util-linux in Debian does build with readline support but chfn and chsh are provided\nNOTE: by src:shadow and util-linux is configured with --disable-chfn-chsh", "related_urls": [], "occurrence_count": 0, "reachable_flows": 0}
{"id": "CVE-2022-41722", "package": "golang:stdlib", "purl": "pkg:golang/stdlib@v1.18.2", "package_type": "golang", "package_usage": "N/A", "version": "v1.18.2", "fix_version": "1.21.9", "severity": "LOW", "cvss_score": "2.0", "short_description": "# Path traversal on Windows in path/filepath\nA path traversal vulnerability exists in filepath.Clean on Windows.\n\nOn Windows, the filepath.Clean function could transform an invalid path such as \"a/../c:/b\" into the valid path \"c:\b\". This transformation of a relative (if invalid) path into an absolute path could enable a directory traversal attack.\n\nAfter fix, the filepath.Clean function transforms this path into the relative (but still invalid) path \".\\c:\b\".\n\n## Related CVE(s)\nBIT-golang-2022-41722, CVE-2022-41722", "related_urls": ["https://go.dev/issue/57274", "https://go.dev/cl/468123", "https://groups.google.com/g/golang-announce/c/V0aBFqaFs_E"], "occurrence_count": 0, "reachable_flows": 0}
{"id": "CVE-2013-4788", "package": "suse:pam-modules", "purl": "suse:pam-modules", "package_type": "suse", "package_usage": "N/A", "version": null, "fix_version": "11-1.18.1", "severity": "MEDIUM", "cvss_score": "5.0", "short_description": "The PTR_MANGLE implementation in the GNU C Library (aka glibc or libc6) 2.4, 2.17, and earlier, and Embedded GLIBC (EGLIBC) does not initialize the random value for the pointer guard, which makes it easier for context-dependent attackers to control execution flow by leveraging a buffer-overflow vulnerability in an application and using the known zero value pointer guard to calculate a pointer address.", "related_urls": ["https://www.suse.com/security/cve/CVE-2013-4788.html", "https://bugzilla.suse.com/1123874", "https://bugzilla.suse.com/830268", "https://bugzilla.suse.com/882910", "https://bugzilla.suse.com/950944"], "occurrence_count": 0, "reachable_flows": 0}
{"id": "CVE-2022-30634", "package": "golang:stdlib", "purl": "pkg:golang/stdlib@v1.18.2", "package_type": "golang", "package_usage": "N/A", "version": "v1.18.2", "fix_version": "1.21.9", "severity": "LOW", "cvss_score": "2.0", "short_description": "# Indefinite hang with large buffers on Windows in crypto/rand\nOn Windows, rand.Read will hang indefinitely if passed a buffer larger than 1 << 32 - 1 bytes.\n\n## Related CVE(s)\nBIT-golang-2022-30634, CVE-2022-30634", "related_urls": ["https://go.dev/cl/402257", "https://go.googlesource.com/go/+/bb1f4416180511231de6d17a1f2f55c82aafc863", "https://go.dev/issue/52561", "https://groups.google.com/g/golang-announce/c/TzIC9-t8Ytg/m/IWz5T6x7AAAJ"], "occurrence_count": 0, "reachable_flows": 0}
{"id": "CVE-2013-4332", "package": "suse:pam-modules", "purl": "suse:pam-modules", "package_type": "suse", "package_usage": "N/A", "version": null, "fix_version": "11-1.18.1", "severity": "MEDIUM", "cvss_score": "5.0", "short_description": "Multiple integer overflows in malloc/malloc.c in the GNU C Library (aka glibc or libc6) 2.18 and earlier allow context-dependent attackers to cause a denial of service (heap corruption) via a large value to the (1) pvalloc, (2) valloc, (3) posix_memalign, (4) memalign, or (5) aligned_alloc functions.", "related_urls": ["https://www.suse.com/security/cve/CVE-2013-4332.html", "https://bugzilla.suse.com/1123874", "https://bugzilla.suse.com/839870", "https://bugzilla.suse.com/882910"], "occurrence_count": 0, "reachable_flows": 0}
{"id": "CVE-2013-4357", "package": "suse:pam-modules", "purl": "suse:pam-modules", "package_type": "suse", "package_usage": "N/A", "version": null, "fix_version": "11-1.18.1", "severity": "HIGH", "cvss_score": "7.5", "short_description": "The eglibc package before 2.14 incorrectly handled the getaddrinfo() function. An attacker could use this issue to cause a denial of service.", "related_urls": ["https://www.suse.com/security/cve/CVE-2013-4357.html", "https://bugzilla.suse.com/844309", "https://bugzilla.suse.com/883217", "https://bugzilla.suse.com/903057"], "occurrence_count": 0, "reachable_flows": 0}
{"id": "CVE-2022-27664", "package": "golang:stdlib", "purl": "pkg:golang/stdlib@v1.18.2", "package_type": "golang", "package_usage": "N/A", "version": "v1.18.2", "fix_version": "1.21.9", "severity": "LOW", "cvss_score": "2.0", "short_description": "# Denial of service in net/http and golang.org/x/net/http2\nHTTP/2 server connections can hang forever waiting for a clean shutdown that was preempted by a fatal error. This condition can be exploited by a malicious client to cause a denial of service.\n\n## Related CVE(s)\nBIT-golang-2022-27664, CVE-2022-27664, GHSA-69cg-p879-7622", "related_urls": ["https://groups.google.com/g/golang-announce/c/x49AQzIVX-s", "https://go.dev/issue/54658", "https://go.dev/cl/428735"], "occurrence_count": 0, "reachable_flows": 0}
{"id": "CVE-2022-2880", "package": "golang:stdlib", "purl": "pkg:golang/stdlib@v1.18.2", "package_type": "golang", "package_usage": "N/A", "version": "v1.18.2", "fix_version": "1.21.9", "severity": "LOW", "cvss_score": "2.0", "short_description": "# Incorrect sanitization of forwarded query parameters in net/http/httputil\nRequests forwarded by ReverseProxy include the raw query parameters from the inbound request, including unparsable parameters rejected by net/http. This could permit query parameter smuggling when a Go proxy forwards a parameter with an unparsable value.\n\nAfter fix, ReverseProxy sanitizes the query parameters in the forwarded query when the outbound request's Form field is set after the ReverseProxy. Director function returns, indicating that the proxy has parsed the query parameters. Proxies which do not parse query parameters continue to forward the original query parameters unchanged.\n\n## Related CVE(s)\nBIT-golang-2022-2880, CVE-2022-2880", "related_urls": ["https://go.dev/issue/54663", "https://go.dev/cl/432976", "https://groups.google.com/g/golang-announce/c/xtuG5faxtaU"], "occurrence_count": 0, "reachable_flows": 0}
{"id": "CVE-2022-41715", "package": "golang:stdlib", "purl": "pkg:golang/stdlib@v1.18.2", "package_type": "golang", "package_usage": "N/A", "version": "v1.18.2", "fix_version": "1.21.9", "severity": "LOW", "cvss_score": "2.0", "short_description": "# Memory exhaustion when compiling regular expressions in regexp/syntax\nPrograms which compile regular expressions from untrusted sources may be vulnerable to memory exhaustion or denial of service.\n\nThe parsed regexp representation is linear in the size of the input, but in some cases the constant factor can be as high as 40,000, making relatively small regexps consume much larger amounts of memory.\n\nAfter fix, each regexp being parsed is limited to a 256 MB memory footprint. Regular expressions whose representation would use more space than that are rejected. Normal use of regular expressions is unaffected.\n\n## Related CVE(s)\nBIT-golang-2022-41715, CVE-2022-41715", "related_urls": ["https://go.dev/issue/55949", "https://go.dev/cl/439356", "https://groups.google.com/g/golang-announce/c/xtuG5faxtaU"], "occurrence_count": 0, "reachable_flows": 0}
{"id": "CVE-2022-2879", "package": "golang:stdlib", "purl": "pkg:golang/stdlib@v1.18.2", "package_type": "golang", "package_usage": "N/A", "version": "v1.18.2", "fix_version": "1.21.9", "severity": "LOW", "cvss_score": "2.0", "short_description": "# Unbounded memory consumption when reading headers in archive/tar\nReader.Read does not set a limit on the maximum size of file headers. A maliciously crafted archive could cause Read to allocate unbounded amounts of memory, potentially causing resource exhaustion or panics. After fix, Reader.Read limits the maximum size of header blocks to 1 MiB.\n\n## Related CVE(s)\nBIT-golang-2022-2879, CVE-2022-2879", "related_urls": ["https://go.dev/issue/54853", "https://go.dev/cl/439355", "https://groups.google.com/g/golang-announce/c/xtuG5faxtaU"], "occurrence_count": 0, "reachable_flows": 0}
{"id": "CVE-2024-28085", "package": "debian:util-linux", "purl": "debian:util-linux", "package_type": "debian", "package_usage": "N/A", "version": null, "fix_version": "2.39.3-11", "severity": "MEDIUM", "cvss_score": "5.0", "short_description": "wall in util-linux through 2.40, often installed with setgid tty permi ...\nNOTE: https://www.openwall.com/lists/oss-security/2024/03/27/5\nNOTE: https://github.com/util-linux/util-linux/commit/404b0781f52f7c045ca811b2dceec526408ac253 (v2.40)", "related_urls": [], "occurrence_count": 0, "reachable_flows": 0}
{"id": "CVE-2023-39325", "package": "golang:stdlib", "purl": "pkg:golang/stdlib@v1.18.2", "package_type": "golang", "package_usage": "N/A", "version": "v1.18.2", "fix_version": "1.21.9", "severity": "LOW", "cvss_score": "2.0", "short_description": "# HTTP/2 rapid reset can cause excessive work in net/http\nA malicious HTTP/2 client which rapidly creates requests and immediately resets them can cause excessive server resource consumption. While the total number of requests is bounded by the http2.Server.MaxConcurrentStreams setting, resetting an in-progress request allows the attacker to create a new request while the existing one is still executing.\n\nWith the fix applied, HTTP/2 servers now bound the number of simultaneously executing handler goroutines to the stream concurrency limit (MaxConcurrentStreams). New requests arriving when at the limit (which can only happen after the client has reset an existing, in-flight request) will be queued until a handler exits. If the request queue grows too large, the server will terminate the connection.\n\nThis issue is also fixed in golang.org/x/net/http2 for users manually configuring HTTP/2.\n\nThe default stream concurrency limit is 250 streams (requests) per HTTP/2 connection. This value may be adjusted using the golang.org/x/net/http2 package; see the Server.MaxConcurrentStreams setting and the ConfigureServer function.\n\n## Related CVE(s)\nBIT-golang-2023-39325, CVE-2023-39325, GHSA-4374-p667-p6c8", "related_urls": ["https://go.dev/issue/63417", "https://go.dev/cl/534215", "https://go.dev/cl/534235", "https://groups.google.com/g/golang-announce/c/iNNxDTCjZvo/m/UDd7VKQuAAAJ"], "occurrence_count": 0, "reachable_flows": 0}
{"id": "CVE-2023-45284", "package": "golang:stdlib", "purl": "pkg:golang/stdlib@v1.18.2", "package_type": "golang", "package_usage": "N/A", "version": "v1.18.2", "fix_version": "1.21.9", "severity": "LOW", "cvss_score": "2.0", "short_description": "# Incorrect detection of reserved device names on Windows in path/filepath\nOn Windows, The IsLocal function does not correctly detect reserved device names in some cases.\n\nReserved names followed by spaces, such as \"COM1 \", and reserved names \"COM\" and \"LPT\" followed by superscript 1, 2, or 3, are incorrectly reported as local.\n\nWith fix, IsLocal now correctly reports these names as non-local.\n\n## Related CVE(s)\nBIT-golang-2023-45284, CVE-2023-45284", "related_urls": ["https://go.dev/issue/63713", "https://go.dev/cl/540277", "https://groups.google.com/g/golang-announce/c/4tU8LZfBFkY"], "occurrence_count": 0, "reachable_flows": 0}
{"id": "ALSA-2023:0959", "package": "almalinux:tar", "purl": "almalinux:tar", "package_type": "almalinux", "package_usage": "N/A", "version": null, "fix_version": "1.34", "severity": "MEDIUM", "cvss_score": "5.0", "short_description": "The GNU tar program can save multiple files in an archive and restore files from an archive.\n\nSecurity Fix(es):\n\n* tar: heap buffer overflow at from_header() in list.c via specially crafted checksum (CVE-2022-48303)\n\nFor more details about the security issue(s), including the impact, a CVSS score, acknowledgments, and other related information, refer to the CVE page(s) listed in the References section.", "related_urls": ["https://bugzilla.redhat.com/2149722", "https://access.redhat.com/security/cve/CVE-2022-48303", "https://access.redhat.com/errata/RHSA-2023:0959", "https://errata.almalinux.org/9/ALSA-2023-0959.html"], "occurrence_count": 0, "reachable_flows": 0}
{"id": "CVE-2014-5119", "package": "suse:pam-modules", "purl": "suse:pam-modules", "package_type": "suse", "package_usage": "N/A", "version": null, "fix_version": "11-1.18.1", "severity": "HIGH", "cvss_score": "7.5", "short_description": "Off-by-one error in the __gconv_translit_find function in gconv_trans.c in GNU C Library (aka glibc) allows context-dependent attackers to cause a denial of service (crash) or execute arbitrary code via vectors related to the CHARSET environment variable and gconv transliteration modules.", "related_urls": ["https://www.suse.com/security/cve/CVE-2014-5119.html", "https://bugzilla.suse.com/892073", "https://bugzilla.suse.com/903057", "https://bugzilla.suse.com/916222"], "occurrence_count": 0, "reachable_flows": 0}
{"id": "CVE-2023-29406", "package": "golang:stdlib", "purl": "pkg:golang/stdlib@v1.18.2", "package_type": "golang", "package_usage": "N/A", "version": "v1.18.2", "fix_version": "1.21.9", "severity": "LOW", "cvss_score": "2.0", "short_description": "# Insufficient sanitization of Host header in net/http\nThe HTTP/1 client does not fully validate the contents of the Host header. A maliciously crafted Host header can inject additional headers or entire requests.\n\nWith fix, the HTTP/1 client now refuses to send requests containing an invalid Request.Host or Request.URL.Host value.\n\n## Related CVE(s)\nBIT-golang-2023-29406, CVE-2023-29406", "related_urls": ["https://go.dev/issue/60374", "https://go.dev/cl/506996", "https://groups.google.com/g/golang-announce/c/2q13H6LEEx0"], "occurrence_count": 0, "reachable_flows": 0}
{"id": "CVE-2014-6040", "package": "suse:pam-modules", "purl": "suse:pam-modules", "package_type": "suse", "package_usage": "N/A", "version": null, "fix_version": "11-1.18.1", "severity": "MEDIUM", "cvss_score": "5.0", "short_description": "GNU C Library (aka glibc) before 2.20 allows context-dependent attackers to cause a denial of service (out-of-bounds read and crash) via a multibyte character value of \"0xffff\" to the iconv function when converting (1) IBM933, (2) IBM935, (3) IBM937, (4) IBM939, or (5) IBM1364 encoded data to UTF-8.", "related_urls": ["https://www.suse.com/security/cve/CVE-2014-6040.html", "https://bugzilla.suse.com/894553", "https://bugzilla.suse.com/903057", "https://bugzilla.suse.com/916222"], "occurrence_count": 0, "reachable_flows": 0}
{"id": "CVE-2021-37713", "package": "npm:tar", "purl": "npm:tar", "package_type": "npm", "package_usage": "N/A", "version": null, "fix_version": "4.4.18", "severity": "HIGH", "cvss_score": "8.2", "short_description": "# Arbitrary File Creation/Overwrite on Windows via insufficient relative path sanitization\n### Impact\n\nArbitrary File Creation, Arbitrary File Overwrite, Arbitrary Code Execution\n\nnode-tar aims to guarantee that any file whose location would be outside of the extraction target directory is not extracted. This is, in part, accomplished by sanitizing absolute paths of entries within the archive, skipping archive entries that contain `..` path portions, and resolving the sanitized paths against the extraction target directory.\n\nThis logic was insufficient on Windows systems when extracting tar files that contained a path that was not an absolute path, but specified a drive letter different from the extraction target, such as `C:some\\path`.\tIf the drive letter does not match the extraction target, for example `D:\\extraction\\dir`, then the result of `path.resolve(extractionDirectory, entryPath)` would resolve against the current working directory on the `C:` drive, rather than the extraction target directory.\n\nAdditionally, a `..` portion of the path could occur immediately after the drive letter, such as `C:../foo`, and was not properly sanitized by the logic that checked for `..` within the normalized and split portions of the path.\n\nThis only affects users of `node-tar` on Windows systems.\n\n### Patches\n\n4.4.18 || 5.0.10 || 6.1.9\n\n### Workarounds\n\nThere is no reasonable way to work around this issue without performing the same path normalization procedures that node-tar now does.\n\nUsers are encouraged to upgrade to the latest patched versions of node-tar, rather than attempt to sanitize paths themselves.\n\n### Fix\n\nThe fixed versions strip path roots from all paths prior to being resolved against the extraction target folder, even if such paths are not \"absolute\".\n\nAdditionally, a path starting with a drive letter and then two dots, like `c:../`, would bypass the check for `..` path portions.\tThis is checked properly in the patched versions.\n\nFinally, a defense in depth check is added, such that if the `entry.absolute` is outside of the extraction taret, and we are not in preservePaths:true mode, a warning is raised on that entry, and it is skipped.\tCurrently, it is believed that this check is redundant, but it did catch some oversights in development.", "related_urls": ["https://github.com/npm/node-tar/security/advisories/GHSA-5955-9wpr-37jh", "https://nvd.nist.gov/vuln/detail/CVE-2021-37713", "https://github.com/isaacs/node-tar/commit/52b09e309bcae0c741a7eb79a17ef36e7828b946", "https://github.com/isaacs/node-tar/commit/82eac952f7c10765969ed464e549375854b26edc", "https://github.com/isaacs/node-tar/commit/875a37e3ec031186fc6599f6807341f56c584598", "https://cert-portal.siemens.com/productcert/pdf/ssa-389290.pdf", "https://github.com/npm/node-tar", "https://www.npmjs.com/package/tar", "https://www.oracle.com/security-alerts/cpuoct2021.html"], "occurrence_count": 0, "reachable_flows": 0}
{"id": "CVE-2023-2602", "package": "debian:libcap2", "purl": "debian:libcap2", "package_type": "debian", "package_usage": "N/A", "version": null, "fix_version": "2.66-4", "severity": "MEDIUM", "cvss_score": "5.0", "short_description": "A vulnerability was found in the pthread_create function in libcap.\t...\nNOTE: https://sites.google.com/site/fullycapable/release-notes-for-libcap#h.iuvg7sbjg8pe\nNOTE: https://www.x41-dsec.de/static/reports/X41-libcap-Code-Review-2023-OSTIF-Final-Report.pdf\nNOTE: https://www.openwall.com/lists/oss-security/2023/05/15/4\nNOTE: Fixed by: https://git.kernel.org/pub/scm/libs/libcap/libcap.git/commit/?id=bc6b36682f188020ee4770fae1d41bde5b2c97bb (libcap-2.69)", "related_urls": [], "occurrence_count": 0, "reachable_flows": 0}
{"id": "CVE-2012-6656", "package": "suse:pam-modules", "purl": "suse:pam-modules", "package_type": "suse", "package_usage": "N/A", "version": null, "fix_version": "11-1.18.1", "severity": "MEDIUM", "cvss_score": "5.0", "short_description": "iconvdata/ibm930.c in GNU C Library (aka glibc) before 2.16 allows context-dependent attackers to cause a denial of service (out-of-bounds read) via a multibyte character value of \"0xffff\" to the iconv function when converting IBM930 encoded data to UTF-8.", "related_urls": ["https://www.suse.com/security/cve/CVE-2012-6656.html", "https://bugzilla.suse.com/894556", "https://bugzilla.suse.com/903057"], "occurrence_count": 0, "reachable_flows": 0}
{"id": "CVE-2023-29403", "package": "golang:stdlib", "purl": "pkg:golang/stdlib@v1.18.2", "package_type": "golang", "package_usage": "N/A", "version": "v1.18.2", "fix_version": "1.21.9", "severity": "LOW", "cvss_score": "2.0", "short_description": "# Unsafe behavior in setuid/setgid binaries in runtime\nOn Unix platforms, the Go runtime does not behave differently when a binary is run with the setuid/setgid bits. This can be dangerous in certain cases, such as when dumping memory state, or assuming the status of standard i/o file descriptors.\n\nIf a setuid/setgid binary is executed with standard I/O file descriptors closed, opening any files can result in unexpected content being read or written with elevated privileges. Similarly, if a setuid/setgid program is terminated, either via panic or signal, it may leak the contents of its registers.\n\n## Related CVE(s)\nBIT-golang-2023-29403, CVE-2023-29403", "related_urls": ["https://go.dev/issue/60272", "https://go.dev/cl/501223", "https://groups.google.com/g/golang-announce/c/q5135a9d924/m/j0ZoAJOHAwAJ"], "occurrence_count": 0, "reachable_flows": 0}
{"id": "CVE-2024-24783", "package": "golang:stdlib", "purl": "pkg:golang/stdlib@v1.18.2", "package_type": "golang", "package_usage": "N/A", "version": "v1.18.2", "fix_version": "1.21.9", "severity": "LOW", "cvss_score": "2.0", "short_description": "# Verify panics on certificates with an unknown public key algorithm in crypto/x509\nVerifying a certificate chain which contains a certificate with an unknown public key algorithm will cause Certificate.Verify to panic.\n\nThis affects all crypto/tls clients, and servers that set Config.ClientAuth to VerifyClientCertIfGiven or RequireAndVerifyClientCert. The default behavior is for TLS servers to not verify client certificates.\n\n## Related CVE(s)\nBIT-golang-2024-24783, CVE-2024-24783", "related_urls": ["https://go.dev/issue/65390", "https://go.dev/cl/569339", "https://groups.google.com/g/golang-announce/c/5pwGVUPoMbg"], "occurrence_count": 0, "reachable_flows": 0}
{"id": "CVE-2023-45289", "package": "golang:stdlib", "purl": "pkg:golang/stdlib@v1.18.2", "package_type": "golang", "package_usage": "N/A", "version": "v1.18.2", "fix_version": "1.21.9", "severity": "LOW", "cvss_score": "2.0", "short_description": "# Incorrect forwarding of sensitive headers and cookies on HTTP redirect in net/http\nWhen following an HTTP redirect to a domain which is not a subdomain match or exact match of the initial domain, an http.Client does not forward sensitive headers such as \"Authorization\" or \"Cookie\". For example, a redirect from foo.com to www.foo.com will forward the Authorization header, but a redirect to bar.com will not.\n\nA maliciously crafted HTTP redirect could cause sensitive headers to be unexpectedly forwarded.\n\n## Related CVE(s)\nBIT-golang-2023-45289, CVE-2023-45289", "related_urls": ["https://go.dev/issue/65065", "https://go.dev/cl/569340", "https://groups.google.com/g/golang-announce/c/5pwGVUPoMbg"], "occurrence_count": 0, "reachable_flows": 0}
{"id": "CVE-2023-45290", "package": "golang:stdlib", "purl": "pkg:golang/stdlib@v1.18.2", "package_type": "golang", "package_usage": "N/A", "version": "v1.18.2", "fix_version": "1.21.9", "severity": "LOW", "cvss_score": "2.0", "short_description": "# Memory exhaustion in multipart form parsing in net/textproto and net/http\nWhen parsing a multipart form (either explicitly with Request.ParseMultipartForm or implicitly with Request.FormValue, Request.PostFormValue, or Request.FormFile), limits on the total size of the parsed form were not applied to the memory consumed while reading a single form line. This permits a maliciously crafted input containing very long lines to cause allocation of arbitrarily large amounts of memory, potentially leading to memory exhaustion.\n\nWith fix, the ParseMultipartForm function now correctly limits the maximum size of form lines.\n\n## Related CVE(s)\nBIT-golang-2023-45290, CVE-2023-45290", "related_urls": ["https://go.dev/issue/65383", "https://go.dev/cl/569341", "https://groups.google.com/g/golang-announce/c/5pwGVUPoMbg"], "occurrence_count": 0, "reachable_flows": 0}
{"id": "MAL-2022-6280", "package": "npm:ss2", "purl": "npm:ss2", "package_type": "npm", "package_usage": "N/A", "version": null, "fix_version": null, "severity": "LOW", "cvss_score": "2.0", "short_description": "# Malicious code in ss2 (npm)\n\n---\n_-= Per source details. Do not edit below this line.=-_\n\n## Source: ghsa-malware (2437321e4b5e0de0740b6c2539011e629dc45486c7ac3c94bd901d613c1d2c32)\nAny computer that has this package installed or running should be considered fully compromised. All secrets and keys stored on that computer should be rotated immediately from a different computer. The package should be removed, but as full control of the computer may have been given to an outside entity, there is no guarantee that removing the package will remove all malicious software resulting from installing it.", "related_urls": ["https://github.com/advisories/GHSA-jm6m-3w2v-7q2q"], "occurrence_count": 0, "reachable_flows": 0}
{"id": "CVE-2022-30631", "package": "golang:stdlib", "purl": "pkg:golang/stdlib@v1.18.2", "package_type": "golang", "package_usage": "N/A", "version": "v1.18.2", "fix_version": "1.21.9", "severity": "LOW", "cvss_score": "2.0", "short_description": "# Stack exhaustion when reading certain archives in compress/gzip\nCalling Reader.Read on an archive containing a large number of concatenated 0-length compressed files can cause a panic due to stack exhaustion.\n\n## Related CVE(s)\nBIT-golang-2022-30631, CVE-2022-30631", "related_urls": ["https://go.dev/cl/417067", "https://go.googlesource.com/go/+/b2b8872c876201eac2d0707276c6999ff3eb185e", "https://go.dev/issue/53168", "https://groups.google.com/g/golang-announce/c/nqrv9fbR0zE"], "occurrence_count": 0, "reachable_flows": 0}
{"id": "CVE-2022-30635", "package": "golang:stdlib", "purl": "pkg:golang/stdlib@v1.18.2", "package_type": "golang", "package_usage": "N/A", "version": "v1.18.2", "fix_version": "1.21.9", "severity": "LOW", "cvss_score": "2.0", "short_description": "# Stack exhaustion when decoding certain messages in encoding/gob\nCalling Decoder.Decode on a message which contains deeply nested structures can cause a panic due to stack exhaustion.\n\n## Related CVE(s)\nBIT-golang-2022-30635, CVE-2022-30635", "related_urls": ["https://go.dev/cl/417064", "https://go.googlesource.com/go/+/6fa37e98ea4382bf881428ee0c150ce591500eb7", "https://go.dev/issue/53615", "https://groups.google.com/g/golang-announce/c/nqrv9fbR0zE"], "occurrence_count": 0, "reachable_flows": 0}
{"id": "CVE-2022-30630", "package": "golang:stdlib", "purl": "pkg:golang/stdlib@v1.18.2", "package_type": "golang", "package_usage": "N/A", "version": "v1.18.2", "fix_version": "1.21.9", "severity": "LOW", "cvss_score": "2.0", "short_description": "# Stack exhaustion in Glob on certain paths in io/fs\nCalling Glob on a path which contains a large number of path separators can cause a panic due to stack exhaustion.\n\n## Related CVE(s)\nBIT-golang-2022-30630, CVE-2022-30630", "related_urls": ["https://go.dev/cl/417065", "https://go.googlesource.com/go/+/fa2d41d0ca736f3ad6b200b2a4e134364e9acc59", "https://go.dev/issue/53415", "https://groups.google.com/g/golang-announce/c/nqrv9fbR0zE"], "occurrence_count": 0, "reachable_flows": 0}
{"id": "CVE-2022-30629", "package": "golang:stdlib", "purl": "pkg:golang/stdlib@v1.18.2", "package_type": "golang", "package_usage": "N/A", "version": "v1.18.2", "fix_version": "1.21.9", "severity": "LOW", "cvss_score": "2.0", "short_description": "# Session tickets lack random ticket_age_add in crypto/tls\nAn attacker can correlate a resumed TLS session with a previous connection.\n\nSession tickets generated by crypto/tls do not contain a randomly generated ticket_age_add, which allows an attacker that can observe TLS handshakes to correlate successive connections by comparing ticket ages during session resumption.\n\n## Related CVE(s)\nBIT-golang-2022-30629, CVE-2022-30629", "related_urls": ["https://go.dev/cl/405994", "https://go.googlesource.com/go/+/fe4de36198794c447fbd9d7cc2d7199a506c76a5", "https://go.dev/issue/52814", "https://groups.google.com/g/golang-announce/c/TzIC9-t8Ytg/m/IWz5T6x7AAAJ"], "occurrence_count": 0, "reachable_flows": 0}
{"id": "CVE-2022-29804", "package": "golang:stdlib", "purl": "pkg:golang/stdlib@v1.18.2", "package_type": "golang", "package_usage": "N/A", "version": "v1.18.2", "fix_version": "1.21.9", "severity": "LOW", "cvss_score": "2.0", "short_description": "# Path traversal via Clean on Windows in path/filepath\nOn Windows, the filepath.Clean function can convert certain invalid paths to valid, absolute paths, potentially allowing a directory traversal attack.\n\nFor example, Clean(\".\\c:\") returns \"c:\".\n\n## Related CVE(s)\nBIT-golang-2022-29804, CVE-2022-29804", "related_urls": ["https://go.dev/cl/401595", "https://go.googlesource.com/go/+/9cd1818a7d019c02fa4898b3e45a323e35033290", "https://go.dev/issue/52476", "https://groups.google.com/g/golang-announce/c/TzIC9-t8Ytg/m/IWz5T6x7AAAJ"], "occurrence_count": 0, "reachable_flows": 0}
{"id": "CVE-2022-30580", "package": "golang:stdlib", "purl": "pkg:golang/stdlib@v1.18.2", "package_type": "golang", "package_usage": "N/A", "version": "v1.18.2", "fix_version": "1.21.9", "severity": "LOW", "cvss_score": "2.0", "short_description": "# Empty Cmd.Path can trigger unintended binary in os/exec on Windows\nOn Windows, executing Cmd.Run, Cmd.Start, Cmd.Output, or Cmd.CombinedOutput when Cmd.Path is unset will unintentionally trigger execution of any binaries in the working directory named either \"..com\" or \"..exe\".\n\n## Related CVE(s)\nBIT-golang-2022-30580, CVE-2022-30580", "related_urls": ["https://go.dev/cl/403759", "https://go.googlesource.com/go/+/960ffa98ce73ef2c2060c84c7ac28d37a83f345e", "https://go.dev/issue/52574", "https://groups.google.com/g/golang-announce/c/TzIC9-t8Ytg/m/IWz5T6x7AAAJ"], "occurrence_count": 0, "reachable_flows": 0}
{"id": "CVE-2022-32189", "package": "golang:stdlib", "purl": "pkg:golang/stdlib@v1.18.2", "package_type": "golang", "package_usage": "N/A", "version": "v1.18.2", "fix_version": "1.21.9", "severity": "LOW", "cvss_score": "2.0", "short_description": "# Panic when decoding Float and Rat types in math/big\nDecoding big.Float and big.Rat types can panic if the encoded message is too short, potentially allowing a denial of service.\n\n## Related CVE(s)\nBIT-golang-2022-32189, CVE-2022-32189", "related_urls": ["https://go.dev/cl/417774", "https://go.googlesource.com/go/+/055113ef364337607e3e72ed7d48df67fde6fc66", "https://go.dev/issue/53871", "https://groups.google.com/g/golang-announce/c/YqYYG87xB10"], "occurrence_count": 0, "reachable_flows": 0}
{"id": "CVE-2013-0242", "package": "suse:pam-modules", "purl": "suse:pam-modules", "package_type": "suse", "package_usage": "N/A", "version": null, "fix_version": "11-1.18.1", "severity": "MEDIUM", "cvss_score": "5.0", "short_description": "Buffer overflow in the extend_buffers function in the regular expression matcher (posix/regexec.c) in glibc, possibly 2.17 and earlier, allows context-dependent attackers to cause a denial of service (memory corruption and crash) via crafted multibyte characters.", "related_urls": ["https://www.suse.com/security/cve/CVE-2013-0242.html", "https://bugzilla.suse.com/801246", "https://bugzilla.suse.com/848783", "https://bugzilla.suse.com/882910"], "occurrence_count": 0, "reachable_flows": 0}
{"id": "CVE-2015-1472", "package": "suse:pam-modules", "purl": "suse:pam-modules", "package_type": "suse", "package_usage": "N/A", "version": null, "fix_version": "11-1.18.1", "severity": "MEDIUM", "cvss_score": "5.0", "short_description": "The ADDW macro in stdio-common/vfscanf.c in the GNU C Library (aka glibc or libc6) before 2.21 does not properly consider data-type size during memory allocation, which allows context-dependent attackers to cause a denial of service (buffer overflow) or possibly have unspecified other impact via a long line containing wide characters that are improperly handled in a wscanf call.", "related_urls": ["https://www.suse.com/security/cve/CVE-2015-1472.html", "https://bugzilla.suse.com/916222", "https://bugzilla.suse.com/920341", "https://bugzilla.suse.com/922243"], "occurrence_count": 0, "reachable_flows": 0}
{"id": "CVE-2021-32804", "package": "npm:tar", "purl": "npm:tar", "package_type": "npm", "package_usage": "N/A", "version": null, "fix_version": "3.2.2", "severity": "HIGH", "cvss_score": "8.2", "short_description": "# Arbitrary File Creation/Overwrite due to insufficient absolute path sanitization\n### Impact\n\nArbitrary File Creation, Arbitrary File Overwrite, Arbitrary Code Execution\n\n`node-tar` aims to prevent extraction of absolute file paths by turning absolute paths into relative paths when the `preservePaths` flag is not set to `true`. This is achieved by stripping the absolute path root from any absolute file paths contained in a tar file. For example `/home/user/.bashrc` would turn into `home/user/.bashrc`. \n\nThis logic was insufficient when file paths contained repeated path roots such as `////home/user/.bashrc`. `node-tar` would only strip a single path root from such paths. When given an absolute file path with repeating path roots, the resulting path (e.g. `///home/user/.bashrc`) would still resolve to an absolute path, thus allowing arbitrary file creation and overwrite. \n\n### Patches\n\n3.2.2 || 4.4.14 || 5.0.6 || 6.1.1\n\nNOTE: an adjacent issue [CVE-2021-32803](https://github.com/npm/node-tar/security/advisories/GHSA-r628-mhmh-qjhw) affects this release level. Please ensure you update to the latest patch levels that address CVE-2021-32803 as well if this adjacent issue affects your `node-tar` use case.\n\n### Workarounds\n\nUsers may work around this vulnerability without upgrading by creating a custom `onentry` method which sanitizes the `entry.path` or a `filter` method which removes entries with absolute paths.\n\n```js\nconst path = require('path')\nconst tar = require('tar')\n\ntar.x({\n\tfile: 'archive.tgz',\n\t// either add this function...\n\tonentry: (entry) => {\n\t\tif (path.isAbsolute(entry.path)) {\n\t\t\tentry.path = sanitizeAbsolutePathSomehow(entry.path)\n\t\t\tentry.absolute = path.resolve(entry.path)\n\t\t}\n\t},\n\n\t// or this one\n\tfilter: (file, entry) => {\n\t\tif (path.isAbsolute(entry.path)) {\n\t\t\treturn false\n\t\t} else {\n\t\t\treturn true\n\t\t}\n\t}\n})\n```\n\nUsers are encouraged to upgrade to the latest patch versions, rather than attempt to sanitize tar input themselves.", "related_urls": ["https://github.com/npm/node-tar/security/advisories/GHSA-3jfq-g458-7qm9", "https://nvd.nist.gov/vuln/detail/CVE-2021-32804", "https://github.com/npm/node-tar/commit/1f036ca23f64a547bdd6c79c1a44bc62e8115da4", "https://cert-portal.siemens.com/productcert/pdf/ssa-389290.pdf", "https://github.com/npm/node-tar", "https://www.npmjs.com/advisories/1770", "https://www.npmjs.com/package/tar", "https://www.oracle.com/security-alerts/cpuoct2021.html"], "occurrence_count": 0, "reachable_flows": 0}
{"id": "CVE-2023-24539", "package": "golang:stdlib", "purl": "pkg:golang/stdlib@v1.18.2", "package_type": "golang", "package_usage": "N/A", "version": "v1.18.2", "fix_version": "1.21.9", "severity": "LOW", "cvss_score": "2.0", "short_description": "# Improper sanitization of CSS values in html/template\nAngle brackets (<>) are not considered dangerous characters when inserted into CSS contexts. Templates containing multiple actions separated by a '/' character can result in unexpectedly closing the CSS context and allowing for injection of unexpected HTML, if executed with untrusted input.\n\n## Related CVE(s)\nBIT-golang-2023-24539, CVE-2023-24539", "related_urls": ["https://go.dev/issue/59720", "https://go.dev/cl/491615", "https://groups.google.com/g/golang-announce/c/MEb0UyuSMsU"], "occurrence_count": 0, "reachable_flows": 0}
{"id": "CVE-2023-24540", "package": "golang:stdlib", "purl": "pkg:golang/stdlib@v1.18.2", "package_type": "golang", "package_usage": "N/A", "version": "v1.18.2", "fix_version": "1.21.9", "severity": "LOW", "cvss_score": "2.0", "short_description": "# Improper handling of JavaScript whitespace in html/template\nNot all valid JavaScript whitespace characters are considered to be whitespace. Templates containing whitespace characters outside of the character set \"\t\n\f\r\\u0020\\u2028\\u2029\" in JavaScript contexts that also contain actions may not be properly sanitized during execution.\n\n## Related CVE(s)\nBIT-golang-2023-24540, CVE-2023-24540", "related_urls": ["https://go.dev/issue/59721", "https://go.dev/cl/491616", "https://groups.google.com/g/golang-announce/c/MEb0UyuSMsU"], "occurrence_count": 0, "reachable_flows": 0}
{"id": "CVE-2023-29400", "package": "golang:stdlib", "purl": "pkg:golang/stdlib@v1.18.2", "package_type": "golang", "package_usage": "N/A", "version": "v1.18.2", "fix_version": "1.21.9", "severity": "LOW", "cvss_score": "2.0", "short_description": "# Improper handling of empty HTML attributes in html/template\nTemplates containing actions in unquoted HTML attributes (e.g. \"attr={{.}}\") executed with empty input can result in output with unexpected results when parsed due to HTML normalization rules. This may allow injection of arbitrary attributes into tags.\n\n## Related CVE(s)\nBIT-golang-2023-29400, CVE-2023-29400", "related_urls": ["https://go.dev/issue/59722", "https://go.dev/cl/491617", "https://groups.google.com/g/golang-announce/c/MEb0UyuSMsU"], "occurrence_count": 0, "reachable_flows": 0}
{"id": "CVE-2018-20834", "package": "npm:tar", "purl": "npm:tar", "package_type": "npm", "package_usage": "N/A", "version": null, "fix_version": "2.2.2", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# Arbitrary File Overwrite in tar\nVersions of `tar` prior to 4.4.2 for 4.x and 2.2.2 for 2.x are vulnerable to Arbitrary File Overwrite. Extracting tarballs containing a hardlink to a file that already exists in the system, and a file that matches the hardlink will overwrite the system's file with the contents of the extracted file.\n\n\n## Recommendation\n\nFor tar 4.x, upgrade to version 4.4.2 or later.\nFor tar 2.x, upgrade to version 2.2.2 or later.", "related_urls": ["https://nvd.nist.gov/vuln/detail/CVE-2018-20834", "https://github.com/npm/node-tar/commit/7ecef07da6a9e72cc0c4d0c9c6a8e85b6b52395d", "https://github.com/npm/node-tar/commit/b0c58433c22f5e7fe8b1c76373f27e3f81dcd4c8", "https://hackerone.com/reports/344595", "https://access.redhat.com/errata/RHSA-2019:1821", "https://github.com/isaacs/node-tar", "https://github.com/npm/node-tar/commits/v2.2.2", "https://github.com/npm/node-tar/compare/58a8d43...a5f7779"], "occurrence_count": 0, "reachable_flows": 0}
{"id": "CVE-2012-0864", "package": "suse:pam-modules", "purl": "suse:pam-modules", "package_type": "suse", "package_usage": "N/A", "version": null, "fix_version": "11-1.18.1", "severity": "MEDIUM", "cvss_score": "5.0", "short_description": "Integer overflow in the vfprintf function in stdio-common/vfprintf.c in glibc 2.14 and other versions allows context-dependent attackers to bypass the FORTIFY_SOURCE protection mechanism, conduct format string attacks, and write to arbitrary memory via a large number of arguments.", "related_urls": ["https://www.suse.com/security/cve/CVE-2012-0864.html", "https://bugzilla.suse.com/747768", "https://bugzilla.suse.com/826666"], "occurrence_count": 0, "reachable_flows": 0}
{"id": "CVE-2018-6829", "package": "debian:libgcrypt20", "purl": "debian:libgcrypt20", "package_type": "debian", "package_usage": "N/A", "version": null, "fix_version": "", "severity": "LOW", "cvss_score": "2.0", "short_description": "cipher/elgamal.c in Libgcrypt through 1.8.2, when used to encrypt mess ...\nNOTE: https://github.com/weikengchen/attack-on-libgcrypt-elgamal\nNOTE: https://github.com/weikengchen/attack-on-libgcrypt-elgamal/wiki\nNOTE: https://lists.gnupg.org/pipermail/gcrypt-devel/2018-February/004394.html\nNOTE: GnuPG uses ElGamal in hybrid mode only.\nNOTE: This is not a vulnerability in libgcrypt, but in an application using\nNOTE: it in an insecure manner, see also\nNOTE: https://lists.gnupg.org/pipermail/gcrypt-devel/2018-February/004401.html", "related_urls": [], "occurrence_count": 0, "reachable_flows": 0}
{"id": "CVE-2022-1962", "package": "golang:stdlib", "purl": "pkg:golang/stdlib@v1.18.2", "package_type": "golang", "package_usage": "N/A", "version": "v1.18.2", "fix_version": "1.21.9", "severity": "LOW", "cvss_score": "2.0", "short_description": "# Stack exhaustion due to deeply nested types in go/parser\nCalling any of the Parse functions on Go source code which contains deeply nested types or declarations can cause a panic due to stack exhaustion.\n\n## Related CVE(s)\nBIT-golang-2022-1962, CVE-2022-1962", "related_urls": ["https://go.dev/cl/417063", "https://go.googlesource.com/go/+/695be961d57508da5a82217f7415200a11845879", "https://go.dev/issue/53616", "https://groups.google.com/g/golang-announce/c/nqrv9fbR0zE"], "occurrence_count": 0, "reachable_flows": 0}
{"id": "CVE-2022-32148", "package": "golang:stdlib", "purl": "pkg:golang/stdlib@v1.18.2", "package_type": "golang", "package_usage": "N/A", "version": "v1.18.2", "fix_version": "1.21.9", "severity": "LOW", "cvss_score": "2.0", "short_description": "# Exposure of client IP addresses in net/http\nClient IP adresses may be unintentionally exposed via X-Forwarded-For headers.\n\nWhen httputil.ReverseProxy.ServeHTTP is called with a Request.Header map containing a nil value for the X-Forwarded-For header, ReverseProxy sets the client IP as the value of the X-Forwarded-For header, contrary to its documentation.\n\nIn the more usual case where a Director function sets the X-Forwarded-For header value to nil, ReverseProxy leaves the header unmodified as expected.\n\n## Related CVE(s)\nBIT-golang-2022-32148, CVE-2022-32148", "related_urls": ["https://go.dev/cl/412857", "https://go.googlesource.com/go/+/b2cc0fecc2ccd80e6d5d16542cc684f97b3a9c8a", "https://go.dev/issue/53423", "https://groups.google.com/g/golang-announce/c/nqrv9fbR0zE"], "occurrence_count": 0, "reachable_flows": 0}
{"id": "CVE-2022-30632", "package": "golang:stdlib", "purl": "pkg:golang/stdlib@v1.18.2", "package_type": "golang", "package_usage": "N/A", "version": "v1.18.2", "fix_version": "1.21.9", "severity": "LOW", "cvss_score": "2.0", "short_description": "# Stack exhaustion on crafted paths in path/filepath\nCalling Glob on a path which contains a large number of path separators can cause a panic due to stack exhaustion.\n\n## Related CVE(s)\nBIT-golang-2022-30632, CVE-2022-30632", "related_urls": ["https://go.dev/cl/417066", "https://go.googlesource.com/go/+/ac68c6c683409f98250d34ad282b9e1b0c9095ef", "https://go.dev/issue/53416", "https://groups.google.com/g/golang-announce/c/nqrv9fbR0zE"], "occurrence_count": 0, "reachable_flows": 0}
{"id": "CVE-2022-28131", "package": "golang:stdlib", "purl": "pkg:golang/stdlib@v1.18.2", "package_type": "golang", "package_usage": "N/A", "version": "v1.18.2", "fix_version": "1.21.9", "severity": "LOW", "cvss_score": "2.0", "short_description": "# Stack exhaustion from deeply nested XML documents in encoding/xml\nCalling Decoder.Skip when parsing a deeply nested XML document can cause a panic due to stack exhaustion.\n\n## Related CVE(s)\nBIT-golang-2022-28131, CVE-2022-28131", "related_urls": ["https://go.dev/cl/417062", "https://go.googlesource.com/go/+/08c46ed43d80bbb67cb904944ea3417989be4af3", "https://go.dev/issue/53614", "https://groups.google.com/g/golang-announce/c/nqrv9fbR0zE"], "occurrence_count": 0, "reachable_flows": 0}
{"id": "CVE-2022-30633", "package": "golang:stdlib", "purl": "pkg:golang/stdlib@v1.18.2", "package_type": "golang", "package_usage": "N/A", "version": "v1.18.2", "fix_version": "1.21.9", "severity": "LOW", "cvss_score": "2.0", "short_description": "# Stack exhaustion when unmarshaling certain documents in encoding/xml\nUnmarshaling an XML document into a Go struct which has a nested field that uses the 'any' field tag can panic due to stack exhaustion.\n\n## Related CVE(s)\nBIT-golang-2022-30633, CVE-2022-30633", "related_urls": ["https://go.dev/cl/417061", "https://go.googlesource.com/go/+/c4c1993fd2a5b26fe45c09592af6d3388a3b2e08", "https://go.dev/issue/53611", "https://groups.google.com/g/golang-announce/c/nqrv9fbR0zE"], "occurrence_count": 0, "reachable_flows": 0}
{"id": "CVE-2022-1705", "package": "golang:stdlib", "purl": "pkg:golang/stdlib@v1.18.2", "package_type": "golang", "package_usage": "N/A", "version": "v1.18.2", "fix_version": "1.21.9", "severity": "LOW", "cvss_score": "2.0", "short_description": "# Improper sanitization of Transfer-Encoding headers in net/http\nThe HTTP/1 client accepted some invalid Transfer-Encoding headers as indicating a \"chunked\" encoding. This could potentially allow for request smuggling, but only if combined with an intermediate server that also improperly failed to reject the header as invalid.\n\n## Related CVE(s)\nBIT-golang-2022-1705, CVE-2022-1705", "related_urls": ["https://go.dev/cl/409874", "https://go.googlesource.com/go/+/e5017a93fcde94f09836200bca55324af037ee5f", "https://go.dev/issue/53188", "https://go.dev/cl/410714", "https://groups.google.com/g/golang-announce/c/nqrv9fbR0zE"], "occurrence_count": 0, "reachable_flows": 0}
{"id": "CVE-2023-45288", "package": "golang:stdlib", "purl": "pkg:golang/stdlib@v1.18.2", "package_type": "golang", "package_usage": "N/A", "version": "v1.18.2", "fix_version": "1.21.9", "severity": "LOW", "cvss_score": "2.0", "short_description": "# HTTP/2 CONTINUATION flood in net/http\nAn attacker may cause an HTTP/2 endpoint to read arbitrary amounts of header data by sending an excessive number of CONTINUATION frames.\n\nMaintaining HPACK state requires parsing and processing all HEADERS and CONTINUATION frames on a connection. When a request's headers exceed MaxHeaderBytes, no memory is allocated to store the excess headers, but they are still parsed.\n\nThis permits an attacker to cause an HTTP/2 endpoint to read arbitrary amounts of header data, all associated with a request which is going to be rejected. These headers can include Huffman-encoded data which is significantly more expensive for the receiver to decode than for an attacker to send.\n\nThe fix sets a limit on the amount of excess header frames we will process before closing a connection.\n\n## Related CVE(s)\nBIT-golang-2023-45288, CVE-2023-45288, GHSA-4v7x-pqxf-cx7m", "related_urls": ["https://go.dev/issue/65051", "https://go.dev/cl/576155", "https://groups.google.com/g/golang-announce/c/YgW0sx8mN3M"], "occurrence_count": 0, "reachable_flows": 0}
{"id": "CVE-2023-4039", "package": "suse:libgcc_s1", "purl": "suse:libgcc_s1", "package_type": "suse", "package_usage": "N/A", "version": null, "fix_version": "13.2.1+git7813-150000.1.6.1", "severity": "HIGH", "cvss_score": "7.5", "short_description": "**DISPUTED**A failure in the -fstack-protector feature in GCC-based toolchains \nthat target AArch64 allows an attacker to exploit an existing buffer \noverflow in dynamically-sized local variables in your application \nwithout this being detected. This stack-protector failure only applies \nto C99-style dynamically-sized local variables or those created using \nalloca(). The stack-protector operates as intended for statically-sized \nlocal variables.\n\nThe default behavior when the stack-protector \ndetects an overflow is to terminate your application, resulting in \ncontrolled loss of availability. An attacker who can exploit a buffer \noverflow without triggering the stack-protector might be able to change \nprogram flow control to cause an uncontrolled loss of availability or to\n go further and affect confidentiality or integrity. NOTE: The GCC project argues that this is a missed hardening bug and not a vulnerability by itself.", "related_urls": ["https://www.suse.com/security/cve/CVE-2023-4039.html", "https://bugzilla.suse.com/1214052"], "occurrence_count": 0, "reachable_flows": 0}
{"id": "CVE-2024-2236", "package": "debian:libgcrypt20", "purl": "debian:libgcrypt20", "package_type": "debian", "package_usage": "N/A", "version": null, "fix_version": "", "severity": "MEDIUM", "cvss_score": "5.0", "short_description": "A timing-based side-channel flaw was found in libgcrypt's RSA implemen ...\nNOTE: https://bugzilla.redhat.com/show_bug.cgi?id=2268268\nNOTE: https://lists.gnupg.org/pipermail/gcrypt-devel/2024-March/005607.html\nNOTE: https://github.com/tomato42/marvin-toolkit/tree/master/example/libgcrypt\nNOTE: https://people.redhat.com/~hkario/marvin/", "related_urls": [], "occurrence_count": 0, "reachable_flows": 0}
{"id": "CVE-2023-24532", "package": "golang:stdlib", "purl": "pkg:golang/stdlib@v1.18.2", "package_type": "golang", "package_usage": "N/A", "version": "v1.18.2", "fix_version": "1.21.9", "severity": "LOW", "cvss_score": "2.0", "short_description": "# Incorrect calculation on P256 curves in crypto/internal/nistec\nThe ScalarMult and ScalarBaseMult methods of the P256 Curve may return an incorrect result if called with some specific unreduced scalars (a scalar larger than the order of the curve).\n\nThis does not impact usages of crypto/ecdsa or crypto/ecdh.\n\n## Related CVE(s)\nBIT-golang-2023-24532, CVE-2023-24532", "related_urls": ["https://go.dev/issue/58647", "https://go.dev/cl/471255", "https://groups.google.com/g/golang-announce/c/3-TpUx48iQY"], "occurrence_count": 0, "reachable_flows": 0}
{"id": "CVE-2023-24537", "package": "golang:stdlib", "purl": "pkg:golang/stdlib@v1.18.2", "package_type": "golang", "package_usage": "N/A", "version": "v1.18.2", "fix_version": "1.21.9", "severity": "LOW", "cvss_score": "2.0", "short_description": "# Infinite loop in parsing in go/scanner\nCalling any of the Parse functions on Go source code which contains //line directives with very large line numbers can cause an infinite loop due to integer overflow.\n\n## Related CVE(s)\nBIT-golang-2023-24537, CVE-2023-24537", "related_urls": ["https://go.dev/issue/59180", "https://go.dev/cl/482078", "https://groups.google.com/g/golang-announce/c/Xdv6JL9ENs8"], "occurrence_count": 0, "reachable_flows": 0}
{"id": "CVE-2023-24538", "package": "golang:stdlib", "purl": "pkg:golang/stdlib@v1.18.2", "package_type": "golang", "package_usage": "N/A", "version": "v1.18.2", "fix_version": "1.21.9", "severity": "LOW", "cvss_score": "2.0", "short_description": "# Backticks not treated as string delimiters in html/template\nTemplates do not properly consider backticks (`) as Javascript string delimiters, and do not escape them as expected.\n\nBackticks are used, since ES6, for JS template literals. If a template contains a Go template action within a Javascript template literal, the contents of the action can be used to terminate the literal, injecting arbitrary Javascript code into the Go template.\n\nAs ES6 template literals are rather complex, and themselves can do string interpolation, the decision was made to simply disallow Go template actions from being used inside of them (e.g. \"var a = {{.}}\"), since there is no obviously safe way to allow this behavior. This takes the same approach as github.com/google/safehtml.\n\nWith fix, Template.Parse returns an Error when it encounters templates like this, with an ErrorCode of value 12. This ErrorCode is currently unexported, but will be exported in the release of Go 1.21.\n\nUsers who rely on the previous behavior can re-enable it using the GODEBUG flag jstmpllitinterp=1, with the caveat that backticks will now be escaped. This should be used with caution.\n\n## Related CVE(s)\nBIT-golang-2023-24538, CVE-2023-24538", "related_urls": ["https://go.dev/issue/59234", "https://go.dev/cl/482079", "https://groups.google.com/g/golang-announce/c/Xdv6JL9ENs8"], "occurrence_count": 0, "reachable_flows": 0}
{"id": "CVE-2023-24534", "package": "golang:stdlib", "purl": "pkg:golang/stdlib@v1.18.2", "package_type": "golang", "package_usage": "N/A", "version": "v1.18.2", "fix_version": "1.21.9", "severity": "LOW", "cvss_score": "2.0", "short_description": "# Excessive memory allocation in net/http and net/textproto\nHTTP and MIME header parsing can allocate large amounts of memory, even when parsing small inputs, potentially leading to a denial of service.\n\nCertain unusual patterns of input data can cause the common function used to parse HTTP and MIME headers to allocate substantially more memory than required to hold the parsed headers. An attacker can exploit this behavior to cause an HTTP server to allocate large amounts of memory from a small request, potentially leading to memory exhaustion and a denial of service.\n\nWith fix, header parsing now correctly allocates only the memory required to hold parsed headers.\n\n## Related CVE(s)\nBIT-golang-2023-24534, CVE-2023-24534", "related_urls": ["https://go.dev/issue/58975", "https://go.dev/cl/481994", "https://groups.google.com/g/golang-announce/c/Xdv6JL9ENs8"], "occurrence_count": 0, "reachable_flows": 0}
{"id": "CVE-2023-24536", "package": "golang:stdlib", "purl": "pkg:golang/stdlib@v1.18.2", "package_type": "golang", "package_usage": "N/A", "version": "v1.18.2", "fix_version": "1.21.9", "severity": "LOW", "cvss_score": "2.0", "short_description": "# Excessive resource consumption in net/http, net/textproto and mime/multipart\nMultipart form parsing can consume large amounts of CPU and memory when processing form inputs containing very large numbers of parts.\n\nThis stems from several causes:\n\n1. mime/multipart.Reader.ReadForm limits the total memory a parsed multipart form can consume. ReadForm can undercount the amount of memory consumed, leading it to accept larger inputs than intended.\n2. Limiting total memory does not account for increased pressure on the garbage collector from large numbers of small allocations in forms with many parts.\n3. ReadForm can allocate a large number of short-lived buffers, further increasing pressure on the garbage collector.\n\nThe combination of these factors can permit an attacker to cause an program that parses multipart forms to consume large amounts of CPU and memory, potentially resulting in a denial of service. This affects programs that use mime/multipart.Reader.ReadForm, as well as form parsing in the net/http package with the Request methods FormFile, FormValue, ParseMultipartForm, and PostFormValue.\n\nWith fix, ReadForm now does a better job of estimating the memory consumption of parsed forms, and performs many fewer short-lived allocations.\n\nIn addition, the fixed mime/multipart.Reader imposes the following limits on the size of parsed forms:\n\n1. Forms parsed with ReadForm may contain no more than 1000 parts. This limit may be adjusted with the environment variable GODEBUG=multipartmaxparts=.\n2. Form parts parsed with NextPart and NextRawPart may contain no more than 10,000 header fields. In addition, forms parsed with ReadForm may contain no more than 10,000 header fields across all parts. This limit may be adjusted with the environment variable GODEBUG=multipartmaxheaders=.\n\n## Related CVE(s)\nBIT-golang-2023-24536, CVE-2023-24536", "related_urls": ["https://go.dev/issue/59153", "https://go.dev/cl/482076", "https://go.dev/cl/482075", "https://go.dev/cl/482077", "https://groups.google.com/g/golang-announce/c/Xdv6JL9ENs8"], "occurrence_count": 0, "reachable_flows": 0}
{"id": "CVE-2015-8860", "package": "npm:tar", "purl": "npm:tar", "package_type": "npm", "package_usage": "N/A", "version": null, "fix_version": "2.0.0", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# Symlink Arbitrary File Overwrite in tar\nVersions of `tar` prior to 2.0.0 are affected by an arbitrary file write vulnerability. The vulnerability occurs because `tar` does not verify that extracted symbolic links to not resolve to targets outside of the extraction root directory.\n\n\n\n## Recommendation\n\nUpdate to version 2.0.0 or later", "related_urls": ["https://nvd.nist.gov/vuln/detail/CVE-2015-8860", "https://github.com/advisories/GHSA-gfjr-3jmm-4g9v", "https://github.com/npm/npm", "https://github.com/npm/npm/releases/tag/v2.7.5", "https://www.npmjs.com/advisories/57", "http://www.openwall.com/lists/oss-security/2016/04/20/11"], "occurrence_count": 0, "reachable_flows": 0}
{"id": "CVE-2012-3406", "package": "suse:pam-modules", "purl": "suse:pam-modules", "package_type": "suse", "package_usage": "N/A", "version": null, "fix_version": "11-1.18.1", "severity": "MEDIUM", "cvss_score": "5.0", "short_description": "The vfprintf function in stdio-common/vfprintf.c in GNU C Library (aka glibc) 2.5, 2.12, and probably other versions does not \"properly restrict the use of\" the alloca function when allocating the SPECS array, which allows context-dependent attackers to bypass the FORTIFY_SOURCE format-string protection mechanism and cause a denial of service (crash) or possibly execute arbitrary code via a crafted format string using positional parameters and a large number of format specifiers, a different vulnerability than CVE-2012-3404 and CVE-2012-3405.", "related_urls": ["https://www.suse.com/security/cve/CVE-2012-3406.html", "https://bugzilla.suse.com/770891", "https://bugzilla.suse.com/826666"], "occurrence_count": 0, "reachable_flows": 0}
{"id": "CVE-2022-41724", "package": "golang:stdlib", "purl": "pkg:golang/stdlib@v1.18.2", "package_type": "golang", "package_usage": "N/A", "version": "v1.18.2", "fix_version": "1.21.9", "severity": "LOW", "cvss_score": "2.0", "short_description": "# Panic on large handshake records in crypto/tls\nLarge handshake records may cause panics in crypto/tls.\n\nBoth clients and servers may send large TLS handshake records which cause servers and clients, respectively, to panic when attempting to construct responses.\n\nThis affects all TLS 1.3 clients, TLS 1.2 clients which explicitly enable session resumption (by setting Config.ClientSessionCache to a non-nil value), and TLS 1.3 servers which request client certificates (by setting Config.ClientAuth >= RequestClientCert).\n\n## Related CVE(s)\nBIT-golang-2022-41724, CVE-2022-41724", "related_urls": ["https://go.dev/issue/58001", "https://go.dev/cl/468125", "https://groups.google.com/g/golang-announce/c/V0aBFqaFs_E"], "occurrence_count": 0, "reachable_flows": 0}
{"id": "CVE-2022-41725", "package": "golang:stdlib", "purl": "pkg:golang/stdlib@v1.18.2", "package_type": "golang", "package_usage": "N/A", "version": "v1.18.2", "fix_version": "1.21.9", "severity": "LOW", "cvss_score": "2.0", "short_description": "# Excessive resource consumption in mime/multipart\nA denial of service is possible from excessive resource consumption in net/http and mime/multipart.\n\nMultipart form parsing with mime/multipart.Reader.ReadForm can consume largely unlimited amounts of memory and disk files. This also affects form parsing in the net/http package with the Request methods FormFile, FormValue, ParseMultipartForm, and PostFormValue.\n\nReadForm takes a maxMemory parameter, and is documented as storing \"up to maxMemory bytes +10MB (reserved for non-file parts) in memory\". File parts which cannot be stored in memory are stored on disk in temporary files. The unconfigurable 10MB reserved for non-file parts is excessively large and can potentially open a denial of service vector on its own. However, ReadForm did not properly account for all memory consumed by a parsed form, such as map entry overhead, part names, and MIME headers, permitting a maliciously crafted form to consume well over 10MB. In addition, ReadForm contained no limit on the number of disk files created, permitting a relatively small request body to create a large number of disk temporary files.\n\nWith fix, ReadForm now properly accounts for various forms of memory overhead, and should now stay within its documented limit of 10MB + maxMemory bytes of memory consumption. Users should still be aware that this limit is high and may still be hazardous.\n\nIn addition, ReadForm now creates at most one on-disk temporary file, combining multiple form parts into a single temporary file. The mime/multipart.File interface type's documentation states, \"If stored on disk, the File's underlying concrete type will be an *os.File.\". This is no longer the case when a form contains more than one file part, due to this coalescing of parts into a single file. The previous behavior of using distinct files for each form part may be reenabled with the environment variable GODEBUG=multipartfiles=distinct.\n\nUsers should be aware that multipart.ReadForm and the http.Request methods that call it do not limit the amount of disk consumed by temporary files. Callers can limit the size of form data with http.MaxBytesReader.\n\n## Related CVE(s)\nBIT-golang-2022-41725, CVE-2022-41725", "related_urls": ["https://go.dev/issue/58006", "https://go.dev/cl/468124", "https://groups.google.com/g/golang-announce/c/V0aBFqaFs_E"], "occurrence_count": 0, "reachable_flows": 0}
{"id": "CVE-2022-41723", "package": "golang:stdlib", "purl": "pkg:golang/stdlib@v1.18.2", "package_type": "golang", "package_usage": "N/A", "version": "v1.18.2", "fix_version": "1.21.9", "severity": "LOW", "cvss_score": "2.0", "short_description": "# Denial of service via crafted HTTP/2 stream in net/http and golang.org/x/net\nA maliciously crafted HTTP/2 stream could cause excessive CPU consumption in the HPACK decoder, sufficient to cause a denial of service from a small number of small requests.\n\n## Related CVE(s)\nBIT-golang-2022-41723, CVE-2022-41723, GHSA-vvpx-j8f3-3w6h", "related_urls": ["https://go.dev/issue/57855", "https://go.dev/cl/468135", "https://go.dev/cl/468295", "https://groups.google.com/g/golang-announce/c/V0aBFqaFs_E"], "occurrence_count": 0, "reachable_flows": 0}
{"id": "CVE-2014-7817", "package": "suse:pam-modules", "purl": "suse:pam-modules", "package_type": "suse", "package_usage": "N/A", "version": null, "fix_version": "11-1.18.1", "severity": "MEDIUM", "cvss_score": "5.0", "short_description": "The wordexp function in GNU C Library (aka glibc) 2.21 does not enforce the WRDE_NOCMD flag, which allows context-dependent attackers to execute arbitrary commands, as demonstrated by input containing \"$((`...`))\".", "related_urls": ["https://www.suse.com/security/cve/CVE-2014-7817.html", "https://bugzilla.suse.com/906371"], "occurrence_count": 0, "reachable_flows": 0}
{"id": "CVE-2023-45283", "package": "golang:stdlib", "purl": "pkg:golang/stdlib@v1.18.2", "package_type": "golang", "package_usage": "N/A", "version": "v1.18.2", "fix_version": "1.21.9", "severity": "LOW", "cvss_score": "2.0", "short_description": "# Insecure parsing of Windows paths with a \\??\\ prefix in path/filepath\\nThe filepath package does not recognize paths with a \\??\\ prefix as special.\\n\\nOn Windows, a path beginning with \\??\\ is a Root Local Device path equivalent to a path beginning with \\\\?\\. Paths with a \\??\\ prefix may be used to access arbitrary locations on the system. For example, the path \\??\\c:\\x is equivalent to the more common path c:\\x.\\n\\nBefore fix, Clean could convert a rooted path such as \\a\\..\\??\\b into the root local device path \\??\\b. Clean will now convert this to .\\??\\b.\\n\\nSimilarly, Join(\\, ??, b) could convert a seemingly innocent sequence of path elements into the root local device path \\??\\b. Join will now convert this to \\.\\??\\b.\\n\\nIn addition, with fix, IsAbs now correctly reports paths beginning with \\??\\ as absolute, and VolumeName correctly reports the \\??\\ prefix as a volume name.\\n\\nUPDATE: Go 1.20.11 and Go 1.21.4 inadvertently changed the definition of the volume name in Windows paths starting with \\?, resulting in filepath.Clean(\\?\\c:) returning \\?\\c: rather than \\?\\c:\\ (among other effects). The previous behavior has been restored.\\n\\n## Related CVE(s)\\nBIT-golang-2023-45283, CVE-2023-45283", "related_urls": ["https://go.dev/issue/63713", "https://go.dev/cl/540277", "https://groups.google.com/g/golang-announce/c/4tU8LZfBFkY", "https://go.dev/issue/64028", "https://go.dev/cl/541175", "https://groups.google.com/g/golang-dev/c/6ypN5EjibjM/m/KmLVYH_uAgAJ"], "occurrence_count": 0, "reachable_flows": 0}
{"id": "CVE-2023-45287", "package": "golang:stdlib", "purl": "pkg:golang/stdlib@v1.18.2", "package_type": "golang", "package_usage": "N/A", "version": "v1.18.2", "fix_version": "1.21.9", "severity": "LOW", "cvss_score": "2.0", "short_description": "# Before Go 1.20, the RSA based key exchange methods in crypto/tls may exhibit a timing side channel\nBefore Go 1.20, the RSA based TLS key exchanges used the math/big library, which is not constant time. RSA blinding was applied to prevent timing attacks, but analysis shows this may not have been fully effective. In particular it appears as if the removal of PKCS#1 padding may leak timing information, which in turn could be used to recover session key bits.\n\nIn Go 1.20, the crypto/tls library switched to a fully constant time RSA implementation, which we do not believe exhibits any timing side channels.\n\n## Related CVE(s)\nBIT-golang-2023-45287, CVE-2023-45287", "related_urls": ["https://go.dev/issue/20654", "https://go.dev/cl/326012/26", "https://groups.google.com/g/golang-announce/c/QMK8IQALDvA", "https://people.redhat.com/~hkario/marvin/"], "occurrence_count": 0, "reachable_flows": 0}
{"id": "CVE-2023-39326", "package": "golang:stdlib", "purl": "pkg:golang/stdlib@v1.18.2", "package_type": "golang", "package_usage": "N/A", "version": "v1.18.2", "fix_version": "1.21.9", "severity": "LOW", "cvss_score": "2.0", "short_description": "# Denial of service via chunk extensions in net/http\nA malicious HTTP sender can use chunk extensions to cause a receiver reading from a request or response body to read many more bytes from the network than are in the body.\n\nA malicious HTTP client can further exploit this to cause a server to automatically read a large amount of data (up to about 1GiB) when a handler fails to read the entire body of a request.\n\nChunk extensions are a little-used HTTP feature which permit including additional metadata in a request or response body sent using the chunked encoding. The net/http chunked encoding reader discards this metadata. A sender can exploit this by inserting a large metadata segment with each byte transferred. The chunk reader now produces an error if the ratio of real body to encoded bytes grows too small.\n\n## Related CVE(s)\nBIT-golang-2023-39326, CVE-2023-39326", "related_urls": ["https://go.dev/issue/64433", "https://go.dev/cl/547335", "https://groups.google.com/g/golang-dev/c/6ypN5EjibjM/m/KmLVYH_uAgAJ"], "occurrence_count": 0, "reachable_flows": 0}
{"id": "CVE-2023-39319", "package": "golang:stdlib", "purl": "pkg:golang/stdlib@v1.18.2", "package_type": "golang", "package_usage": "N/A", "version": "v1.18.2", "fix_version": "1.21.9", "severity": "LOW", "cvss_score": "2.0", "short_description": "# Improper handling of special tags within script contexts in html/template\nThe html/template package does not apply the proper rules for handling occurrences of \"<script\", \"<!--\", and \"</script\" within JS literals in <script> contexts. This may cause the template parser to improperly consider script contexts to be terminated early, causing actions to be improperly escaped. This could be leveraged to perform an XSS attack.\n\n## Related CVE(s)\nBIT-golang-2023-39319, CVE-2023-39319", "related_urls": ["https://go.dev/issue/62197", "https://go.dev/cl/526157", "https://groups.google.com/g/golang-dev/c/2C5vbR-UNkI/m/L1hdrPhfBAAJ"], "occurrence_count": 0, "reachable_flows": 0}
{"id": "CVE-2024-24784", "package": "golang:stdlib", "purl": "pkg:golang/stdlib@v1.18.2", "package_type": "golang", "package_usage": "N/A", "version": "v1.18.2", "fix_version": "1.21.9", "severity": "LOW", "cvss_score": "2.0", "short_description": "# Comments in display names are incorrectly handled in net/mail\nThe ParseAddressList function incorrectly handles comments (text within parentheses) within display names. Since this is a misalignment with conforming address parsers, it can result in different trust decisions being made by programs using different parsers.\n\n## Related CVE(s)\nBIT-golang-2024-24784, CVE-2024-24784", "related_urls": ["https://go.dev/issue/65083", "https://go.dev/cl/555596", "https://groups.google.com/g/golang-announce/c/5pwGVUPoMbg"], "occurrence_count": 0, "reachable_flows": 0}
{"id": "CVE-2024-24785", "package": "golang:stdlib", "purl": "pkg:golang/stdlib@v1.18.2", "package_type": "golang", "package_usage": "N/A", "version": "v1.18.2", "fix_version": "1.21.9", "severity": "LOW", "cvss_score": "2.0", "short_description": "# Errors returned from JSON marshaling may break template escaping in html/template\nIf errors returned from MarshalJSON methods contain user controlled data, they may be used to break the contextual auto-escaping behavior of the html/template package, allowing for subsequent actions to inject unexpected content into templates.\n\n## Related CVE(s)\nBIT-golang-2024-24785, CVE-2024-24785", "related_urls": ["https://go.dev/issue/65697", "https://go.dev/cl/564196", "https://groups.google.com/g/golang-announce/c/5pwGVUPoMbg"], "occurrence_count": 0, "reachable_flows": 0}
{"id": "CVE-2012-3480", "package": "suse:pam-modules", "purl": "suse:pam-modules", "package_type": "suse", "package_usage": "N/A", "version": null, "fix_version": "11-1.18.1", "severity": "MEDIUM", "cvss_score": "5.0", "short_description": "Multiple integer overflows in the (1) strtod, (2) strtof, (3) strtold, (4) strtod_l, and other unspecified \"related functions\" in stdlib in GNU C Library (aka glibc or libc6) 2.16 allow local users to cause a denial of service (application crash) and possibly execute arbitrary code via a long string, which triggers a stack-based buffer overflow.", "related_urls": ["https://www.suse.com/security/cve/CVE-2012-3480.html", "https://bugzilla.suse.com/775690", "https://bugzilla.suse.com/826666", "https://bugzilla.suse.com/968660"], "occurrence_count": 0, "reachable_flows": 0}
{"id": "CVE-2024-28863", "package": "npm:tar", "purl": "npm:tar", "package_type": "npm", "package_usage": "N/A", "version": null, "fix_version": "6.2.1", "severity": "MEDIUM", "cvss_score": "6.5", "short_description": "# Denial of service while parsing a tar file due to lack of folders count validation\n## Description: \nDuring some analysis today on npm's `node-tar` package I came across the folder creation process, Basicly if you provide node-tar with a path like this `./a/b/c/foo.txt` it would create every folder and sub-folder here a, b and c until it reaches the last folder to create `foo.txt`, In-this case I noticed that there's no validation at all on the amount of folders being created, that said we're actually able to CPU and memory consume the system running node-tar and even crash the nodejs client within few seconds of running it using a path with too many sub-folders inside\n\n## Steps To Reproduce:\nYou can reproduce this issue by downloading the tar file I provided in the resources and using node-tar to extract it, you should get the same behavior as the video\n\n## Proof Of Concept:\nHere's a [video](https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/3i7uojw8s52psar6pg8zkdo4h9io?response-content-disposition=attachment%3B%20filename%3D%22tar-dos-poc.webm%22%3B%20filename%2A%3DUTF-8%27%27tar-dos-poc.webm&response-content-type=video%2Fwebm&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQSWWGDXHA%2F20240312%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20240312T080103Z&X-Amz-Expires=3600&X-Amz-Security-Token=IQoJb3JpZ2luX2VjEDcaCXVzLXdlc3QtMiJHMEUCID3xYDc6emXVPOg8iVR5dVk0u3gguTPIDJ0OIE%2BKxj17AiEAi%2BGiay1gGMWhH%2F031fvMYnSsa8U7CnpZpxvFAYqNRwgqsQUIQBADGgwwMTM2MTkyNzQ4NDkiDAaj6OgUL3gg4hhLLCqOBUUrOgWSqaK%2FmxN6nKRvB4Who3LIyzswFKm9LV94GiSVFP3zXYA480voCmAHTg7eBL7%2BrYgV2RtXbhF4aCFMCN3qu7GeXkIdH7xwVMi9zXHkekviSKZ%2FsZtVVjn7RFqOCKhJl%2FCoiLQJuDuju%2FtfdTGZbEbGsPgKHoILYbRp81K51zeRL21okjsOehmypkZzq%2BoGrXIX0ynPOKujxw27uqdF4T%2BF9ynodq01vGgwgVBEjHojc4OKOfr1oW5b%2FtGVV59%2BOBVI1hqIKHRG0Ed4SWmp%2BLd1hazGuZPvp52szmegnOj5qr3ubppnKL242bX%2FuAnQKzKK0HpwolqXjsuEeFeM85lxhqHV%2B1BJqaqSHHDa0HUMLZistMRshRlntuchcFQCR6HBa2c8PSnhpVC31zMzvYMfKsI12h4HB6l%2FudrmNrvmH4LmNpi4dZFcio21DzKj%2FRjWmxjH7l8egDyG%2FIgPMY6Ls4IiN7aR1jijYTrBCgPUUHets3BFvqLzHtPFnG3B7%2FYRPnhCLu%2FgzvKN3F8l38KqeTNMHJaxkuhCvEjpFB2SJbi2QZqZZbLj3xASqXoogzbsyPp0Tzp0tH7EKDhPA7H6wwiZukXfFhhlYzP8on9fO2Ajz%2F%2BTDkDjbfWw4KNJ0cFeDsGrUspqQZb5TAKlUge7iOZEc2TZ5uagatSy9Mg08E4nImBSE5QUHDc7Daya1gyqrETMDZBBUHH2RFkGA9qMpEtNrtJ9G%2BPedz%2FpPY1hh9OCp9Pg1BrX97l3SfVzlAMRfNibhywq6qnE35rVnZi%2BEQ1UgBjs9jD%2FQrW49%2FaD0oUDojVeuFFryzRnQxDbKtYgonRcItTvLT5Y0xaK9P0u6H1197%2FMk3XxmjD9%2Fb%2BvBjqxAQWWkKiIxpC1oHEWK9Jt8UdJ39xszDBGpBqjB6Tvt5ePAXSyX8np%2FrBi%2BAPx06O0%2Ba7pU4NmH800EVXxxhgfj9nMw3CeoUIdxorVKtU2Mxw%2FLaAiPgxPS4rqkt65NF7eQYfegcSYDTm2Z%2BHPbz9HfCaVZ28Zqeko6sR%2F29ML4bguqVvHAM4mWPLNDXH33mjG%2BuzLi8e1BF7tNveg2X9G%2FRdcMkojwKYbu6xN3M6aX2alQg%3D%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=1e8235d885f1d61529b7d6b23ea3a0780c300c91d86e925dd8310d5b661ddbe2) show-casing the exploit: \n\n## Impact\n\nDenial of service by crashing the nodejs client when attempting to parse a tar archive, make it run out of heap memory and consuming server CPU and memory resources\n\n## Report resources\n[payload.txt](https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/1e83ayb5dd3350fvj3gst0mqixwk?response-content-disposition=attachment%3B%20filename%3D%22payload.txt%22%3B%20filename%2A%3DUTF-8%27%27payload.txt&response-content-type=text%2Fplain&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQSWWGDXHA%2F20240312%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20240312T080103Z&X-Amz-Expires=3600&X-Amz-Security-Token=IQoJb3JpZ2luX2VjEDcaCXVzLXdlc3QtMiJHMEUCID3xYDc6emXVPOg8iVR5dVk0u3gguTPIDJ0OIE%2BKxj17AiEAi%2BGiay1gGMWhH%2F031fvMYnSsa8U7CnpZpxvFAYqNRwgqsQUIQBADGgwwMTM2MTkyNzQ4NDkiDAaj6OgUL3gg4hhLLCqOBUUrOgWSqaK%2FmxN6nKRvB4Who3LIyzswFKm9LV94GiSVFP3zXYA480voCmAHTg7eBL7%2BrYgV2RtXbhF4aCFMCN3qu7GeXkIdH7xwVMi9zXHkekviSKZ%2FsZtVVjn7RFqOCKhJl%2FCoiLQJuDuju%2FtfdTGZbEbGsPgKHoILYbRp81K51zeRL21okjsOehmypkZzq%2BoGrXIX0ynPOKujxw27uqdF4T%2BF9ynodq01vGgwgVBEjHojc4OKOfr1oW5b%2FtGVV59%2BOBVI1hqIKHRG0Ed4SWmp%2BLd1hazGuZPvp52szmegnOj5qr3ubppnKL242bX%2FuAnQKzKK0HpwolqXjsuEeFeM85lxhqHV%2B1BJqaqSHHDa0HUMLZistMRshRlntuchcFQCR6HBa2c8PSnhpVC31zMzvYMfKsI12h4HB6l%2FudrmNrvmH4LmNpi4dZFcio21DzKj%2FRjWmxjH7l8egDyG%2FIgPMY6Ls4IiN7aR1jijYTrBCgPUUHets3BFvqLzHtPFnG3B7%2FYRPnhCLu%2FgzvKN3F8l38KqeTNMHJaxkuhCvEjpFB2SJbi2QZqZZbLj3xASqXoogzbsyPp0Tzp0tH7EKDhPA7H6wwiZukXfFhhlYzP8on9fO2Ajz%2F%2BTDkDjbfWw4KNJ0cFeDsGrUspqQZb5TAKlUge7iOZEc2TZ5uagatSy9Mg08E4nImBSE5QUHDc7Daya1gyqrETMDZBBUHH2RFkGA9qMpEtNrtJ9G%2BPedz%2FpPY1hh9OCp9Pg1BrX97l3SfVzlAMRfNibhywq6qnE35rVnZi%2BEQ1UgBjs9jD%2FQrW49%2FaD0oUDojVeuFFryzRnQxDbKtYgonRcItTvLT5Y0xaK9P0u6H1197%2FMk3XxmjD9%2Fb%2BvBjqxAQWWkKiIxpC1oHEWK9Jt8UdJ39xszDBGpBqjB6Tvt5ePAXSyX8np%2FrBi%2BAPx06O0%2Ba7pU4NmH800EVXxxhgfj9nMw3CeoUIdxorVKtU2Mxw%2FLaAiPgxPS4rqkt65NF7eQYfegcSYDTm2Z%2BHPbz9HfCaVZ28Zqeko6sR%2F29ML4bguqVvHAM4mWPLNDXH33mjG%2BuzLi8e1BF7tNveg2X9G%2FRdcMkojwKYbu6xN3M6aX2alQg%3D%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=bad9fe731f05a63a950f99828125653a8c1254750fe0ca7be882e89ecdd449ae)\n[archeive.tar.gz](https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/ymkuh4xnfdcf1soeyi7jc2x4yt2i?response-content-disposition=attachment%3B%20filename%3D%22archive.tar.gz%22%3B%20filename%2A%3DUTF-8%27%27archive.tar.gz&response-content-type=application%2Fx-tar&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQSWWGDXHA%2F20240312%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20240312T080103Z&X-Amz-Expires=3600&X-Amz-Security-Token=IQoJb3JpZ2luX2VjEDcaCXVzLXdlc3QtMiJHMEUCID3xYDc6emXVPOg8iVR5dVk0u3gguTPIDJ0OIE%2BKxj17AiEAi%2BGiay1gGMWhH%2F031fvMYnSsa8U7CnpZpxvFAYqNRwgqsQUIQBADGgwwMTM2MTkyNzQ4NDkiDAaj6OgUL3gg4hhLLCqOBUUrOgWSqaK%2FmxN6nKRvB4Who3LIyzswFKm9LV94GiSVFP3zXYA480voCmAHTg7eBL7%2BrYgV2RtXbhF4aCFMCN3qu7GeXkIdH7xwVMi9zXHkekviSKZ%2FsZtVVjn7RFqOCKhJl%2FCoiLQJuDuju%2FtfdTGZbEbGsPgKHoILYbRp81K51zeRL21okjsOehmypkZzq%2BoGrXIX0ynPOKujxw27uqdF4T%2BF9ynodq01vGgwgVBEjHojc4OKOfr1oW5b%2FtGVV59%2BOBVI1hqIKHRG0Ed4SWmp%2BLd1hazGuZPvp52szmegnOj5qr3ubppnKL242bX%2FuAnQKzKK0HpwolqXjsuEeFeM85lxhqHV%2B1BJqaqSHHDa0HUMLZistMRshRlntuchcFQCR6HBa2c8PSnhpVC31zMzvYMfKsI12h4HB6l%2FudrmNrvmH4LmNpi4dZFcio21DzKj%2FRjWmxjH7l8egDyG%2FIgPMY6Ls4IiN7aR1jijYTrBCgPUUHets3BFvqLzHtPFnG3B7%2FYRPnhCLu%2FgzvKN3F8l38KqeTNMHJaxkuhCvEjpFB2SJbi2QZqZZbLj3xASqXoogzbsyPp0Tzp0tH7EKDhPA7H6wwiZukXfFhhlYzP8on9fO2Ajz%2F%2BTDkDjbfWw4KNJ0cFeDsGrUspqQZb5TAKlUge7iOZEc2TZ5uagatSy9Mg08E4nImBSE5QUHDc7Daya1gyqrETMDZBBUHH2RFkGA9qMpEtNrtJ9G%2BPedz%2FpPY1hh9OCp9Pg1BrX97l3SfVzlAMRfNibhywq6qnE35rVnZi%2BEQ1UgBjs9jD%2FQrW49%2FaD0oUDojVeuFFryzRnQxDbKtYgonRcItTvLT5Y0xaK9P0u6H1197%2FMk3XxmjD9%2Fb%2BvBjqxAQWWkKiIxpC1oHEWK9Jt8UdJ39xszDBGpBqjB6Tvt5ePAXSyX8np%2FrBi%2BAPx06O0%2Ba7pU4NmH800EVXxxhgfj9nMw3CeoUIdxorVKtU2Mxw%2FLaAiPgxPS4rqkt65NF7eQYfegcSYDTm2Z%2BHPbz9HfCaVZ28Zqeko6sR%2F29ML4bguqVvHAM4mWPLNDXH33mjG%2BuzLi8e1BF7tNveg2X9G%2FRdcMkojwKYbu6xN3M6aX2alQg%3D%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=5e2c0d4b4de40373ac0fe91908c2659141a6dd4ab850271cc26042a3885c82ea)\n\n## Note\nThis report was originally reported to GitHub bug bounty program, they asked me to report it to you a month ago", "related_urls": ["https://github.com/isaacs/node-tar/security/advisories/GHSA-f5x3-32g6-xq36", "https://nvd.nist.gov/vuln/detail/CVE-2024-28863", "https://github.com/isaacs/node-tar/commit/fe8cd57da5686f8695415414bda49206a545f7f7", "https://github.com/isaacs/node-tar"], "occurrence_count": 0, "reachable_flows": 0}
{"id": "CVE-2023-2603", "package": "debian:libcap2", "purl": "debian:libcap2", "package_type": "debian", "package_usage": "N/A", "version": null, "fix_version": "2.66-4", "severity": "MEDIUM", "cvss_score": "5.0", "short_description": "A vulnerability was found in libcap. This issue occurs in the _libcap_ ...\nNOTE: https://sites.google.com/site/fullycapable/release-notes-for-libcap#h.iuvg7sbjg8pe\nNOTE: https://www.x41-dsec.de/static/reports/X41-libcap-Code-Review-2023-OSTIF-Final-Report.pdf\nNOTE: https://www.openwall.com/lists/oss-security/2023/05/15/4\nNOTE: Fixed by: https://git.kernel.org/pub/scm/libs/libcap/libcap.git/commit/?id=422bec25ae4a1ab03fd4d6f728695ed279173b18 (libcap-2.69)", "related_urls": [], "occurrence_count": 0, "reachable_flows": 0}
{"id": "CVE-2013-1914", "package": "suse:pam-modules", "purl": "suse:pam-modules", "package_type": "suse", "package_usage": "N/A", "version": null, "fix_version": "11-1.18.1", "severity": "MEDIUM", "cvss_score": "5.0", "short_description": "Stack-based buffer overflow in the getaddrinfo function in sysdeps/posix/getaddrinfo.c in GNU C Library (aka glibc or libc6) 2.17 and earlier allows remote attackers to cause a denial of service (crash) via a (1) hostname or (2) IP address that triggers a large number of domain conversion results.", "related_urls": ["https://www.suse.com/security/cve/CVE-2013-1914.html", "https://bugzilla.suse.com/813121", "https://bugzilla.suse.com/826666", "https://bugzilla.suse.com/882910", "https://bugzilla.suse.com/941444"], "occurrence_count": 0, "reachable_flows": 0}
{"id": "CVE-2023-29409", "package": "golang:stdlib", "purl": "pkg:golang/stdlib@v1.18.2", "package_type": "golang", "package_usage": "N/A", "version": "v1.18.2", "fix_version": "1.21.9", "severity": "LOW", "cvss_score": "2.0", "short_description": "# Large RSA keys can cause high CPU usage in crypto/tls\nExtremely large RSA keys in certificate chains can cause a client/server to expend significant CPU time verifying signatures.\n\nWith fix, the size of RSA keys transmitted during handshakes is restricted to <= 8192 bits.\n\nBased on a survey of publicly trusted RSA keys, there are currently only three certificates in circulation with keys larger than this, and all three appear to be test certificates that are not actively deployed. It is possible there are larger keys in use in private PKIs, but we target the web PKI, so causing breakage here in the interests of increasing the default safety of users of crypto/tls seems reasonable.\n\n## Related CVE(s)\nBIT-golang-2023-29409, CVE-2023-29409", "related_urls": ["https://go.dev/issue/61460", "https://go.dev/cl/515257", "https://groups.google.com/g/golang-announce/c/X0b6CsSAaYI/m/Efv5DbZ9AwAJ"], "occurrence_count": 0, "reachable_flows": 0}
{"id": "CVE-2023-39318", "package": "golang:stdlib", "purl": "pkg:golang/stdlib@v1.18.2", "package_type": "golang", "package_usage": "N/A", "version": "v1.18.2", "fix_version": "1.21.9", "severity": "LOW", "cvss_score": "2.0", "short_description": "# Improper handling of HTML-like comments in script contexts in html/template\nThe html/template package does not properly handle HTML-like \"\" comment tokens, nor hashbang \"#!\" comment tokens, in <script> contexts. This may cause the template parser to improperly interpret the contents of <script> contexts, causing actions to be improperly escaped. This may be leveraged to perform an XSS attack.\n\n## Related CVE(s)\nBIT-golang-2023-39318, CVE-2023-39318", "related_urls": ["https://go.dev/issue/62196", "https://go.dev/cl/526156", "https://groups.google.com/g/golang-dev/c/2C5vbR-UNkI/m/L1hdrPhfBAAJ"], "occurrence_count": 0, "reachable_flows": 0}
{"id": "CVE-2022-41716", "package": "golang:stdlib", "purl": "pkg:golang/stdlib@v1.18.2", "package_type": "golang", "package_usage": "N/A", "version": "v1.18.2", "fix_version": "1.21.9", "severity": "LOW", "cvss_score": "2.0", "short_description": "# Unsanitized NUL in environment variables on Windows in syscall and os/exec\nDue to unsanitized NUL values, attackers may be able to maliciously set environment variables on Windows.\n\nIn syscall.StartProcess and os/exec.Cmd, invalid environment variable values containing NUL values are not properly checked for. A malicious environment variable value can exploit this behavior to set a value for a different environment variable. For example, the environment variable string \"A=B\u0000C=D\" sets the variables \"A=B\" and \"C=D\".\n\n## Related CVE(s)\nBIT-golang-2022-41716, CVE-2022-41716", "related_urls": ["https://go.dev/issue/56284", "https://go.dev/cl/446916", "https://groups.google.com/g/golang-announce/c/mbHY1UY3BaM/m/hSpmRzk-AgAJ"], "occurrence_count": 0, "reachable_flows": 0}
{"id": "CVE-2022-41720", "package": "golang:stdlib", "purl": "pkg:golang/stdlib@v1.18.2", "package_type": "golang", "package_usage": "N/A", "version": "v1.18.2", "fix_version": "1.21.9", "severity": "LOW", "cvss_score": "2.0", "short_description": "# Restricted file access on Windows in os and net/http\nOn Windows, restricted files can be accessed via os.DirFS and http.Dir.\n\nThe os.DirFS function and http.Dir type provide access to a tree of files rooted at a given directory. These functions permit access to Windows device files under that root. For example, os.DirFS(\"C:/tmp\").Open(\"COM1\") opens the COM1 device. Both os.DirFS and http.Dir only provide read-only filesystem access.\n\nIn addition, on Windows, an os.DirFS for the directory (the root of the current drive) can permit a maliciously crafted path to escape from the drive and access any path on the system.\n\nWith fix applied, the behavior of os.DirFS(\"\") has changed. Previously, an empty root was treated equivalently to \"/\", so os.DirFS(\"\").Open(\"tmp\") would open the path \"/tmp\". This now returns an error.\n\n## Related CVE(s)\nBIT-golang-2022-41720, CVE-2022-41720", "related_urls": ["https://go.dev/issue/56694", "https://go.dev/cl/455716", "https://groups.google.com/g/golang-announce/c/L_3rmdT0BMU/m/yZDrXjIiBQAJ"], "occurrence_count": 0, "reachable_flows": 0}
{"id": "CVE-2022-41717", "package": "golang:stdlib", "purl": "pkg:golang/stdlib@v1.18.2", "package_type": "golang", "package_usage": "N/A", "version": "v1.18.2", "fix_version": "1.21.9", "severity": "LOW", "cvss_score": "2.0", "short_description": "# Excessive memory growth in net/http and golang.org/x/net/http2\nAn attacker can cause excessive memory growth in a Go server accepting HTTP/2 requests.\n\nHTTP/2 server connections contain a cache of HTTP header keys sent by the client. While the total number of entries in this cache is capped, an attacker sending very large keys can cause the server to allocate approximately 64 MiB per open connection.\n\n## Related CVE(s)\nBIT-golang-2022-41717, CVE-2022-41717, GHSA-xrjj-mj9h-534m", "related_urls": ["https://go.dev/issue/56350", "https://go.dev/cl/455717", "https://go.dev/cl/455635", "https://groups.google.com/g/golang-announce/c/L_3rmdT0BMU/m/yZDrXjIiBQAJ"], "occurrence_count": 0, "reachable_flows": 0}
{"id": "CVE-2024-21485", "package": "pypi:dash", "purl": "pypi:dash", "package_type": "pypi", "package_usage": "N/A", "version": null, "fix_version": null, "severity": "MEDIUM", "cvss_score": "6.5", "short_description": "# Dash apps vulnerable to Cross-site Scripting\nVersions of the package dash-core-components before 2.13.0; versions of the package dash-core-components before 2.0.0; versions of the package dash before 2.15.0; versions of the package dash-html-components before 2.0.0; versions of the package dash-html-components before 2.0.16 are vulnerable to Cross-site Scripting (XSS) when the href of the a tag is controlled by an adversary. An authenticated attacker who stores a view that exploits this vulnerability could steal the data that's visible to another user who opens that view - not just the data already included on the page, but they could also, in theory, make additional requests and access other data accessible to this user. In some cases, they could also steal the access tokens of that user, which would allow the attacker to act as that user, including viewing other apps and resources hosted on the same server. \n\n**Note:** \n\nThis is only exploitable in Dash apps that include some mechanism to store user input to be reloaded by a different user.\n\n## Related CVE(s)\nCVE-2024-21485, PYSEC-2024-35", "related_urls": ["https://nvd.nist.gov/vuln/detail/CVE-2024-21485", "https://github.com/plotly/dash/issues/2729", "https://github.com/plotly/dash/pull/2732", "https://github.com/plotly/dash/commit/9920073c9a8619ae8f90fcec1924f2f3a4332a8c", "https://github.com/plotly/dash", "https://github.com/plotly/dash/releases/tag/v2.15.0", "https://github.com/pypa/advisory-database/tree/main/vulns/dash/PYSEC-2024-35.yaml", "https://security.snyk.io/vuln/SNYK-JS-DASHCORECOMPONENTS-6183084", "https://security.snyk.io/vuln/SNYK-JS-DASHHTMLCOMPONENTS-6226337", "https://security.snyk.io/vuln/SNYK-PYTHON-DASH-6226335", "https://security.snyk.io/vuln/SNYK-PYTHON-DASHCORECOMPONENTS-6226334", "https://security.snyk.io/vuln/SNYK-PYTHON-DASHHTMLCOMPONENTS-6226336"], "occurrence_count": 0, "reachable_flows": 0}
{"id": "CVE-2012-3404", "package": "suse:pam-modules", "purl": "suse:pam-modules", "package_type": "suse", "package_usage": "N/A", "version": null, "fix_version": "11-1.18.1", "severity": "MEDIUM", "cvss_score": "5.0", "short_description": "The vfprintf function in stdio-common/vfprintf.c in libc in GNU C Library (aka glibc) 2.12 and other versions does not properly calculate a buffer length, which allows context-dependent attackers to bypass the FORTIFY_SOURCE format-string protection mechanism and cause a denial of service (stack corruption and crash) via a format string that uses positional parameters and many format specifiers.", "related_urls": ["https://www.suse.com/security/cve/CVE-2012-3404.html", "https://bugzilla.suse.com/770891"], "occurrence_count": 0, "reachable_flows": 0}
{"id": "CVE-2012-4412", "package": "suse:pam-modules", "purl": "suse:pam-modules", "package_type": "suse", "package_usage": "N/A", "version": null, "fix_version": "11-1.18.1", "severity": "HIGH", "cvss_score": "7.5", "short_description": "Integer overflow in string/strcoll_l.c in the GNU C Library (aka glibc or libc6) 2.17 and earlier allows context-dependent attackers to cause a denial of service (crash) or possibly execute arbitrary code via a long string, which triggers a heap-based buffer overflow.", "related_urls": ["https://www.suse.com/security/cve/CVE-2012-4412.html", "https://bugzilla.suse.com/779320", "https://bugzilla.suse.com/848783", "https://bugzilla.suse.com/882910", "https://bugzilla.suse.com/920169", "https://bugzilla.suse.com/920338"], "occurrence_count": 0, "reachable_flows": 0}
{"id": "CVE-2012-3405", "package": "suse:pam-modules", "purl": "suse:pam-modules", "package_type": "suse", "package_usage": "N/A", "version": null, "fix_version": "11-1.18.1", "severity": "MEDIUM", "cvss_score": "5.0", "short_description": "The vfprintf function in stdio-common/vfprintf.c in libc in GNU C Library (aka glibc) 2.14 and other versions does not properly calculate a buffer length, which allows context-dependent attackers to bypass the FORTIFY_SOURCE format-string protection mechanism and cause a denial of service (segmentation fault and crash) via a format string with a large number of format specifiers that triggers \"desynchronization within the buffer size handling,\" a different vulnerability than CVE-2012-3404.", "related_urls": ["https://www.suse.com/security/cve/CVE-2012-3405.html", "https://bugzilla.suse.com/770891"], "occurrence_count": 0, "reachable_flows": 0}
{"id": "CVE-2015-0235", "package": "suse:pam-modules", "purl": "suse:pam-modules", "package_type": "suse", "package_usage": "N/A", "version": null, "fix_version": "11-1.18.1", "severity": "CRITICAL", "cvss_score": "9.0", "short_description": "Heap-based buffer overflow in the __nss_hostname_digits_dots function in glibc 2.2, and other 2.x versions before 2.18, allows context-dependent attackers to execute arbitrary code via vectors related to the (1) gethostbyname or (2) gethostbyname2 function, aka \"GHOST.\"", "related_urls": ["https://www.suse.com/security/cve/CVE-2015-0235.html", "https://bugzilla.suse.com/844309", "https://bugzilla.suse.com/913646", "https://bugzilla.suse.com/949238", "https://bugzilla.suse.com/954983"], "occurrence_count": 0, "reachable_flows": 0}
{"id": "CVE-2013-4237", "package": "suse:pam-modules", "purl": "suse:pam-modules", "package_type": "suse", "package_usage": "N/A", "version": null, "fix_version": "11-1.18.1", "severity": "MEDIUM", "cvss_score": "5.0", "short_description": "sysdeps/posix/readdir_r.c in the GNU C Library (aka glibc or libc6) 2.18 and earlier allows context-dependent attackers to cause a denial of service (out-of-bounds write and crash) or possibly execute arbitrary code via a crafted (1) NTFS or (2) CIFS image.", "related_urls": ["https://www.suse.com/security/cve/CVE-2013-4237.html", "https://bugzilla.suse.com/834594", "https://bugzilla.suse.com/882910", "https://bugzilla.suse.com/883022"], "occurrence_count": 0, "reachable_flows": 0}
{"id": "CVE-2014-9402", "package": "suse:pam-modules", "purl": "suse:pam-modules", "package_type": "suse", "package_usage": "N/A", "version": null, "fix_version": "11-1.18.1", "severity": "HIGH", "cvss_score": "7.5", "short_description": "The nss_dns implementation of getnetbyname in GNU C Library (aka glibc) before 2.21, when the DNS backend in the Name Service Switch configuration is enabled, allows remote attackers to cause a denial of service (infinite loop) by sending a positive answer while a network name is being process.", "related_urls": ["https://www.suse.com/security/cve/CVE-2014-9402.html", "https://bugzilla.suse.com/910599"], "occurrence_count": 0, "reachable_flows": 0}
