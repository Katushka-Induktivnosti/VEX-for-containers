{"id": "NPM-1086450", "package": "npm:highlight.js", "purl": "pkg:npm/highlight.js@11.10.0", "package_type": "npm", "package_usage": "N/A", "version": "11.10.0", "fix_version": "10.4.1", "severity": "MEDIUM", "cvss_score": "5.0", "short_description": "# ReDOS vulnerabities: multiple grammars\n### Impact: Potential ReDOS vulnerabilities (exponential and polynomial RegEx backtracking)\n\n[oswasp (https://owasp.org/www community/attacks/Regular_expression_Denial_of_Service_ _ReDoS): \n\n> The Regular expression Denial of Service (ReDoS) is a Denial of Service attack, that exploits the fact that most Regular Expression implementations may reach extreme situations that cause them to work very slowly (exponentially related to input size). An attacker can then cause a program using a Regular Expression to enter these extreme situations and then hang for a very long time.\n\nIf are you are using Highlight.js to highlight user provided data you are possibly vulnerable.\tOn the client side (in a browser or Electron environment) risks could include lengthy freezes or crashes... On the server side infinite freezes could occur... effectively preventing users from accessing your app or service (ie, Denial of Service).\n\nThis is an issue with grammars shipped with the parser (and potentially 3rd party grammars also), not the parser itself. If you are using Highlight.js with any of the following grammars you are vulnerable.\tIf you are using `highlightAuto` to detect the language (and have any of these grammars registered) you are vulnerable. Exponential grammars (C, Perl, JavaScript) are auto registered when using the common grammar subset/library `require('highlight.js/lib/common')` as of 10.4.0\t see https://cdn.jsdelivr.net/gh/highlightjs/cdn release@10.4.0/build/highlight.js\n\nAll versions prior to 10.4.1 are vulnerable, including version 9.18.5. \n\n**Grammars with exponential backtracking issues:**\n\n\t\tc like (c, cpp, arduino)\n\t\thandlebars (htmlbars)\n\t\tgams\n\t\tperl\n\t\tjboss cli\n\t\tr\n\t\terlang repl\n\t\tpowershell\n\t\trouteros\n\t\tlivescript (10.4.0 and 9.18.5 included this fix)\n\t\tjavascript & typescript (10.4.0 included partial fixes)\n\nAnd of course any aliases of those languages have the same issue. ie: `hpp` is no safer than `cpp`.\n\n**Grammars with polynomial backtracking issues:**\n\n\tkotlin\n\tgcode\n\td\n\taspectj\n\tmoonscript\n\tcoffeescript/livescript\n\tcsharp\n\tscilab\n\tcrystal\n\telixir\n\tbasic\n\tebnf\n\truby\n\tfortran/irpf90\n\tlivecodeserver\n\tyaml\n\tx86asm\n\tdsconfig\n\tmarkdown\n\truleslanguage\n\txquery\n\tsqf\n\nAnd again: any aliases of those languages have the same issue. ie: `ruby` and `rb` share the same ruby issues.\n\n\n### Patches\n\n\tVersion 10.4.1 resolves these vulnerabilities.\tPlease upgrade.\n\n### Workarounds / Mitigations\n\n\tDiscontinue use the affected grammars. (or perhaps use only those with poly vs exponential issues)\n\tAttempt cherry picking the grammar fixes into older versions...\n\tAttempt using newer CDN versions of any affected languages.\t(ie using an older CDN version of the library with newer CDN grammars).\tYour mileage may vary.\n\n### References\n\n\thttps://owasp.org/www community/attacks/Regular_expression_Denial_of_Service_ _ReDoS\n\n### For more information\n\nIf you have any questions or comments about this advisory:\n* Open an issue: https://github.com/highlightjs/highlight.js/issues\n* Email us at [security@highlightjs.com (mailto:security@highlightjs.com)\nUpgrade to version 10.4.1 or later", "related_urls": [], "occurrence_count": 0, "reachable_flows": 0}
{"id": "CVE-2020-26938", "package": "npm:oauth2-server", "purl": "pkg:npm/oauth2-server@3.1.1", "package_type": "npm", "package_usage": "N/A", "version": "3.1.1", "fix_version": null, "severity": "HIGH", "cvss_score": "7.2", "short_description": "# oauth2 server through 3.1.1 vulnerable to Open Redirect\nIn oauth2 server (aka node oauth2 server) through 3.1.1, the value of the `redirect_uri` parameter received during the authorization and token request is checked against an incorrect URI pattern (`[a zA Z [a zA Z0 9+.\t+:`) before making a redirection. This allows a malicious client to pass an XSS payload through the redirect_uri parameter while making an authorization request. NOTE: this vulnerability is similar to CVE 2020 7741.\nNone", "related_urls": [], "occurrence_count": 0, "reachable_flows": 0}
{"id": "CVE-2017-18924", "package": "npm:oauth2-server", "purl": "pkg:npm/oauth2-server@3.1.1", "package_type": "npm", "package_usage": "N/A", "version": "3.1.1", "fix_version": null, "severity": "HIGH", "cvss_score": "7.5", "short_description": "# Code Injection in oauth2 server\n\"oauth2 server (aka node oauth2 server) through 3.1.1 implements OAuth 2.0 without PKCE. It does not prevent authorization code injection. This is similar to CVE 2020 7692. NOTE: the vendor states 'As RFC7636 is an extension, I think the claim in the Readme of \"RFC 6749 compliant\" is valid and not misleading and I also therefore wouldn't describe this as a \"vulnerability\" with the library per se.'\"\nNone", "related_urls": [], "occurrence_count": 0, "reachable_flows": 0}
{"id": "NPM-1090859", "package": "npm:base64-url", "purl": "pkg:npm/base64-url@1.2.1", "package_type": "npm", "package_usage": "N/A", "version": "1.2.1", "fix_version": "2.0.0", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# Out of bounds Read in base64 url\nVersions of `base64 url` before 2.0.0 are vulnerable to out of bounds read as it allocates uninitialized Buffers when number is passed in input.\n\n\n## Recommendation\n\nUpdate to version 2.0.0 or later.\nUpgrade to version 2.0.0 or later", "related_urls": [], "occurrence_count": 0, "reachable_flows": 0}
{"id": "CVE-2019-5413", "package": "npm:morgan", "purl": "pkg:npm/morgan@1.10.0", "package_type": "npm", "package_usage": "N/A", "version": "1.10.0", "fix_version": "1.9.1", "severity": "CRITICAL", "cvss_score": "9.8", "short_description": "# Code Injection in morgan\nVerisons of `morgan` before 1.9.1 are vulnerable to code injection when user input is allowed into the filter or combined with a prototype pollution attack.\n\n\n## Recommendation\n\nUpdate to version 1.9.1 or later.\nUpgrade to version 1.9.1 or later", "related_urls": [], "occurrence_count": 0, "reachable_flows": 0}
{"id": "CVE-2020-28500", "package": "npm:lodash.trim", "purl": "pkg:npm/lodash.trim@4.5.1", "package_type": "npm", "package_usage": "N/A", "version": "4.5.1", "fix_version": null, "severity": "MEDIUM", "cvss_score": "5.3", "short_description": "# Regular Expression Denial of Service (ReDoS) in lodash\nAll versions of package lodash prior to 4.17.21 are vulnerable to Regular Expression Denial of Service (ReDoS) via the `toNumber`, `trim` and `trimEnd` functions. \n\nSteps to reproduce (provided by reporter Liyuan Chen):\n```js\nvar lo = require('lodash');\n\nfunction build_blank(n) {\n\t\tvar ret = \"1\"\n\t\tfor (var i = 0; i < n; i++) {\n\t\t\t\tret += \" \"\n\t\t}\n\t\treturn ret + \"1\";\n}\nvar s = build_blank(50000) var time0 = Date.now();\nlo.trim(s) \nvar time_cost0 = Date.now()\t time0;\nconsole.log(\"time_cost0: \" + time_cost0);\nvar time1 = Date.now();\nlo.toNumber(s) var time_cost1 = Date.now()\t time1;\nconsole.log(\"time_cost1: \" + time_cost1);\nvar time2 = Date.now();\nlo.trimEnd(s);\nvar time_cost2 = Date.now()\t time2;\nconsole.log(\"time_cost2: \" + time_cost2);\n```\nNone", "related_urls": [], "occurrence_count": 0, "reachable_flows": 0}
{"id": "CVE-2023-41037", "package": "npm:openpgp", "purl": "pkg:npm/openpgp@5.9.0", "package_type": "npm", "package_usage": "N/A", "version": "5.9.0", "fix_version": "5.10.1", "severity": "MEDIUM", "cvss_score": "4.3", "short_description": "# Cleartext Signed Message Signature Spoofing in openpgp\n### Impact\nOpenPGP Cleartext Signed Messages are cryptographically signed messages where the signed text is readable without special tools:\n\n```\n\t\t BEGIN PGP SIGNED MESSAGE\t\t \nHash: SHA256\n\nThis text is signed.\n\t\t BEGIN PGP SIGNATURE\t\t \n\nwnUEARMIACcFgmTkrNAJkInXCgj0fgcIFiEE1JlKzzDGQxZmmHkYidcKCPR+\nBwgAAKXDAQDWGhI7tPbhB+jlKwe4+yPJ+9X8aWDUG60XFNi/w8T7ZgEAsAGd\nWJrkm/H5AXGZsqyqqO6IWGF0geTCd4mWm/CsveM=\n\t\t END PGP SIGNATURE\t\t \n```\nThese messages typically contain a \"Hash: ...\" header declaring the hash algorithm used to compute the signature digest.\nOpenPGP.js up to v5.9.0 ignored any data preceding the \"Hash: ...\" texts when verifying the signature. As a result, malicious parties could add arbitrary text to a third party Cleartext Signed Message, to lead the victim to believe that the arbitrary text was signed.\n\nA user or application is vulnerable to said attack vector if it verifies the CleartextMessage by only checking the returned `verified` property, discarding the associated `data` information, and instead _visually trusting_ the contents of the original message:\n\n```js\nconst cleartextMessage = `\n\t\t BEGIN PGP SIGNED MESSAGE\t\t \nThis text is not signed but you might think it is. Hash: SHA256\n\nThis text is signed.\n\t\t BEGIN PGP SIGNATURE\t\t \n\nwnUEARMIACcFgmTkrNAJkInXCgj0fgcIFiEE1JlKzzDGQxZmmHkYidcKCPR+\nBwgAAKXDAQDWGhI7tPbhB+jlKwe4+yPJ+9X8aWDUG60XFNi/w8T7ZgEAsAGd\nWJrkm/H5AXGZsqyqqO6IWGF0geTCd4mWm/CsveM=\n\t\t END PGP SIGNATURE\t\t \n`;\nconst message = await openpgp.readCleartextMessage({ cleartextMessage });\nconst verificationResult = await verifyCleartextMessage({ message, verificationKeys });\nconsole.log(await verificationResult.verified); // output: true\nconsole.log(verificationResult.data); // output: 'This text is signed.'\n```\nSince `verificationResult.data` would always contain the actual signed data, users and apps that check this information are not vulnerable.\nSimilarly, given a CleartextMessage object, retrieving the data using `getText()` or the `text` field returns only the contents that are considered when verifying the signature.\nFinally, re armoring a CleartextMessage object (using `armor()` will also result in a \"sanitised\" version, with the extraneous text being removed.\nBecause of this, we consider the vulnerability impact to be very limited when the CleartextMessage is processed programmatically; this is reflected in the Severity CVSS assessment, specifically in the scope's score (\"Unchanged\").\n\n### Patches\n\tv5.10.1 (current stable version) will reject messages when calling `openpgp.readCleartextMessage()`\n\tv4.10.11 (legacy version) will reject messages when calling `openpgp.cleartext.readArmored()`\n\n### Workarounds\nCheck the contents of `verificationResult.data` to see what data was actually signed, rather than visually trusting the contents of the armored message.\n\n### References\nSimilar CVE: https://sec consult.com/vulnerability lab/advisory/cleartext message spoofing in go cryptography libraries cve 2019 11841/\n\nUpgrade to version 5.10.1 or later", "related_urls": [], "occurrence_count": 0, "reachable_flows": 0}
{"id": "CVE-2022-24999", "package": "npm:qs", "purl": "pkg:npm/qs@6.13.0", "package_type": "npm", "package_usage": "N/A", "version": "6.13.0", "fix_version": "6.7.3", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# qs vulnerable to Prototype Pollution\nqs before 6.10.3 allows attackers to cause a Node process hang because an `__ proto__` key can be used. In many typical web framework use cases, an unauthenticated remote attacker can place the attack payload in the query string of the URL that is used to visit the application, such as `a[__proto__ =b&a[__proto__ &a[length =100000000`. The fix was backported to qs 6.9.7, 6.8.3, 6.7.3, 6.6.1, 6.5.3, 6.4.1, 6.3.3, and 6.2.4.\nUpgrade to version 6.7.3 or later", "related_urls": [], "occurrence_count": 0, "reachable_flows": 0}
{"id": "CVE-2022-46175", "package": "npm:json5", "purl": "pkg:npm/json5@2.2.3", "package_type": "npm", "package_usage": "N/A", "version": "2.2.3", "fix_version": "2.2.2", "severity": "HIGH", "cvss_score": "7.1", "short_description": "# Prototype Pollution in JSON5 via Parse Method\nThe `parse` method of the JSON5 library before and including version `2.2.1` does not restrict parsing of keys named `__proto__`, allowing specially crafted strings to pollute the prototype of the resulting object.\n\nThis vulnerability pollutes the prototype of the object returned by `JSON5.parse` and not the global Object prototype, which is the commonly understood definition of Prototype Pollution. However, polluting the prototype of a single object can have significant security impact for an application if the object is later used in trusted operations.\n\n## Impact\nThis vulnerability could allow an attacker to set arbitrary and unexpected keys on the object returned from `JSON5.parse`. The actual impact will depend on how applications utilize the returned object and how they filter unwanted keys, but could include denial of service, cross site scripting, elevation of privilege, and in extreme cases, remote code execution.\n\n## Mitigation\nThis vulnerability is patched in json5 v2.2.2 and later. A patch has also been backported for json5 v1 in versions v1.0.2 and later.\n\n## Details\n \nSuppose a developer wants to allow users and admins to perform some risky operation, but they want to restrict what non admins can do. To accomplish this, they accept a JSON blob from the user, parse it using `JSON5.parse`, confirm that the provided data does not set some sensitive keys, and then performs the risky operation using the validated data:\n \n```js\nconst JSON5 = require('json5');\n\nconst doSomethingDangerous = (props) => {\n\tif (props.isAdmin) {\n\t\tconsole.log('Doing dangerous thing as admin.');\n\t} else {\n\t\tconsole.log('Doing dangerous thing as user.');\n\t}\n};\n\nconst secCheckKeysSet = (obj, searchKeys) => {\n\tlet searchKeyFound = false;\n\tObject.keys(obj).forEach((key) => {\n\t\tif (searchKeys.indexOf(key) >\t1) {\n\t\t\tsearchKeyFound = true;\n\t\t}\n\t});\n\treturn searchKeyFound;\n};\n\nconst props = JSON5.parse('{\"foo\": \"bar\"}');\nif (!secCheckKeysSet(props, ['isAdmin', 'isMod' )) {\n\tdoSomethingDangerous(props); // \"Doing dangerous thing as user.\"\n} else {\n\tthrow new Error('Forbidden...');\n}\n```\n \nIf the user attempts to set the `isAdmin` key, their request will be rejected:\n \n```js\nconst props = JSON5.parse('{\"foo\": \"bar\", \"isAdmin\": true}');\nif (!secCheckKeysSet(props, ['isAdmin', 'isMod' )) {\n\tdoSomethingDangerous(props);\n} else {\n\tthrow new Error('Forbidden...'); // Error: Forbidden...\n}\n```\n \nHowever, users can instead set the `__proto__` key to `{\"isAdmin\": true}`. `JSON5` will parse this key and will set the `isAdmin` key on the prototype of the returned object, allowing the user to bypass the security check and run their request as an admin:\n \n```js\nconst props = JSON5.parse('{\"foo\": \"bar\", \"__proto__\": {\"isAdmin\": true}}');\nif (!secCheckKeysSet(props, ['isAdmin', 'isMod' )) {\n\tdoSomethingDangerous(props); // \"Doing dangerous thing as admin.\"\n} else {\n\tthrow new Error('Forbidden...');\n}\n ```\nUpgrade to version 2.2.2 or later", "related_urls": [], "occurrence_count": 0, "reachable_flows": 0}
{"id": "CVE-2023-28155", "package": "npm:request", "purl": "pkg:npm/request@2.88.0", "package_type": "npm", "package_usage": "N/A", "version": "2.88.0", "fix_version": null, "severity": "MEDIUM", "cvss_score": "6.1", "short_description": "# Server Side Request Forgery in Request\nThe `request` package through 2.88.2 for Node.js and the `@cypress/request` package prior to 3.0.0 allow a bypass of SSRF mitigations via an attacker controller server that does a cross protocol redirect (HTTP to HTTPS, or HTTPS to HTTP).\n\nNOTE: The `request` package is no longer supported by the maintainer.\nNone", "related_urls": [], "occurrence_count": 0, "reachable_flows": 0}
{"id": "CVE-2021-23337", "package": "npm:lodash.template", "purl": "pkg:npm/lodash.template@4.5.0", "package_type": "npm", "package_usage": "N/A", "version": "4.5.0", "fix_version": null, "severity": "HIGH", "cvss_score": "7.2", "short_description": "# Command Injection in lodash\n`lodash` versions prior to 4.17.21 are vulnerable to Command Injection via the template function.\nNone", "related_urls": [], "occurrence_count": 0, "reachable_flows": 0}
{"id": "CVE-2023-42282", "package": "npm:ip", "purl": "pkg:npm/ip@2.0.0", "package_type": "npm", "package_usage": "N/A", "version": "2.0.0", "fix_version": "2.0.1", "severity": "LOW", "cvss_score": "2.0", "short_description": "# NPM IP package incorrectly identifies some private IP addresses as public\nThe `isPublic()` function in the NPM package `ip` doesn't correctly identify certain private IP addresses in uncommon formats such as `0x7F.1` as private. Instead, it reports them as public by returning `true`. This can lead to security issues such as Server Side Request Forgery (SSRF) if `isPublic()` is used to protect sensitive code paths when passed user input. Versions 1.1.9 and 2.0.1 fix the issue.\nUpgrade to version 2.0.1 or later", "related_urls": [], "occurrence_count": 0, "reachable_flows": 0}
{"id": "CVE-2024-4068", "package": "npm:braces", "purl": "pkg:npm/braces@3.0.2", "package_type": "npm", "package_usage": "N/A", "version": "3.0.2", "fix_version": "3.0.3", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# Uncontrolled resource consumption in braces\nThe NPM package `braces` fails to limit the number of characters it can handle, which could lead to Memory Exhaustion. In `lib/parse.js,` if a malicious user sends \"imbalanced braces\" as input, the parsing will enter a loop, which will cause the program to start allocating heap memory without freeing it at any moment of the loop. Eventually, the JavaScript heap limit is reached, and the program will crash.\n\nUpgrade to version 3.0.3 or later", "related_urls": [], "occurrence_count": 0, "reachable_flows": 0}
{"id": "CVE-2024-4067", "package": "npm:micromatch", "purl": "pkg:npm/micromatch@4.0.5", "package_type": "npm", "package_usage": "N/A", "version": "4.0.5", "fix_version": "4.0.8", "severity": "MEDIUM", "cvss_score": "5.3", "short_description": "# Regular Expression Denial of Service (ReDoS) in micromatch\nThe NPM package `micromatch` prior to version 4.0.8 is vulnerable to Regular Expression Denial of Service (ReDoS). The vulnerability occurs in `micromatch.braces()` in `index.js` because the pattern `.*` will greedily match anything. By passing a malicious payload, the pattern matching will keep backtracking to the input while it doesn't find the closing bracket. As the input size increases, the consumption time will also increase until it causes the application to hang or slow down. There was a merged fix but further testing shows the issue persisted prior to https://github.com/micromatch/micromatch/pull/266. This issue should be mitigated by using a safe pattern that won't start backtracking the regular expression due to greedy matching.\n\nUpgrade to version 4.0.8 or later", "related_urls": [], "occurrence_count": 0, "reachable_flows": 0}
{"id": "CVE-2024-47178", "package": "npm:basic-auth-connect", "purl": "pkg:npm/basic-auth-connect@1.0.0", "package_type": "npm", "package_usage": "N/A", "version": "1.0.0", "fix_version": "1.1.0", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# basic auth connect's callback uses time unsafe string comparison\n### Impact\n\nbasic auth connect <1.1.0 uses a timing unsafe equality comparison that can leak timing information\n\n### Patches\n\nthis issue has been fixed in basic auth connect 1.1.0\n\n### References\n\nUpgrade to version 1.1.0 or later", "related_urls": [], "occurrence_count": 0, "reachable_flows": 0}
{"id": "CVE-2024-21538", "package": "npm:cross-spawn", "purl": "pkg:npm/cross-spawn@7.0.3", "package_type": "npm", "package_usage": "N/A", "version": "7.0.3", "fix_version": "6.0.6", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# Regular Expression Denial of Service (ReDoS) in cross spawn\nVersions of the package cross spawn before 7.0.5 are vulnerable to Regular Expression Denial of Service (ReDoS) due to improper input sanitization. An attacker can increase the CPU usage and crash the program by crafting a very large and well crafted string.\nUpgrade to version 6.0.6 or later", "related_urls": [], "occurrence_count": 0, "reachable_flows": 0}
{"id": "CVE-2024-55565", "package": "npm:nanoid", "purl": "pkg:npm/nanoid@3.3.7", "package_type": "npm", "package_usage": "N/A", "version": "3.3.7", "fix_version": "3.3.8", "severity": "MEDIUM", "cvss_score": "4.3", "short_description": "# Predictable results in nanoid generation when given non integer values\nWhen nanoid is called with a fractional value, there were a number of undesirable effects:\n\n1. in browser and non secure, the code infinite loops on while (size\t)\n2. in node, the value of poolOffset becomes fractional, causing calls to nanoid to return zeroes until the pool is next filled\n3. if the first call in node is a fractional argument, the initial buffer allocation fails with an error\n\nVersion 3.3.8 and 5.0.9 are fixed.\nUpgrade to version 3.3.8 or later", "related_urls": [], "occurrence_count": 0, "reachable_flows": 0}
{"id": "CVE-2025-23207", "package": "npm:katex", "purl": "pkg:npm/katex@0.16.11", "package_type": "npm", "package_usage": "N/A", "version": "0.16.11", "fix_version": "0.16.21", "severity": "MEDIUM", "cvss_score": "6.3", "short_description": "# KaTeX\thtmlData does not validate attribute names\n### Impact\nKaTeX users who render untrusted mathematical expressions with `renderToString` could encounter malicious input using ` htmlData` that runs arbitrary JavaScript, or generate invalid HTML.\n\n### Patches\nUpgrade to KaTeX v0.16.21 to remove this vulnerability.\n\n### Workarounds\n\tAvoid use of or turn off the `trust` option, or set it to forbid ` htmlData` commands.\n\tForbid inputs containing the substring `\"\thtmlData\"`.\n\tSanitize HTML output from KaTeX.\n\n### Details\n` htmlData` did not validate its attribute name argument, allowing it to generate invalid or malicious HTML that runs scripts.\n\n### For more information\nIf you have any questions or comments about this advisory:\n\n\tOpen an issue or security advisory in the [KaTeX repository (https://github.com/KaTeX/KaTeX/)\n\tEmail us at [katex security@mit.edu (mailto:katex security@mit.edu)\nUpgrade to version 0.16.21 or later", "related_urls": [], "occurrence_count": 0, "reachable_flows": 0}
{"id": "CVE-2024-29415", "package": "npm:ip", "purl": "pkg:npm/ip@2.0.0", "package_type": "npm", "package_usage": "N/A", "version": "2.0.0", "fix_version": "2.0.1", "severity": "HIGH", "cvss_score": "8.1", "short_description": "# ip SSRF improper categorization in isPublic\nThe ip package through 2.0.1 for Node.js might allow SSRF because some IP addresses (such as 127.1, 01200034567, 012.1.2.3, 000:0:0000::01, and ::fFFf:127.0.0.1) are improperly categorized as globally routable via isPublic. NOTE: this issue exists because of an incomplete fix for CVE 2023 42282.\nNone", "related_urls": [], "occurrence_count": 0, "reachable_flows": 0}
{"id": "CVE-2024-4367", "package": "npm:pdfjs-dist", "purl": "pkg:npm/pdfjs-dist@2.16.105", "package_type": "npm", "package_usage": "N/A", "version": "2.16.105", "fix_version": "4.2.67", "severity": "HIGH", "cvss_score": "8.8", "short_description": "# PDF.js vulnerable to arbitrary JavaScript execution upon opening a malicious PDF\n### Impact\nIf pdf.js is used to load a malicious PDF, and PDF.js is configured with `isEvalSupported` set to `true` (which is the default value), unrestricted attacker controlled JavaScript will be executed in the context of the hosting domain.\n\n### Patches\nThe patch removes the use of `eval`:\nhttps://github.com/mozilla/pdf.js/pull/18015\n\n### Workarounds\nSet the option `isEvalSupported` to `false`. \n\n### References\nhttps://bugzilla.mozilla.org/show_bug.cgi?id=1893645\nUpgrade to version 4.2.67 or later", "related_urls": [], "occurrence_count": 0, "reachable_flows": 0}
{"id": "CVE-2025-26791", "package": "npm:dompurify", "purl": "pkg:npm/dompurify@3.2.0", "package_type": "npm", "package_usage": "N/A", "version": "3.2.0", "fix_version": "3.2.4", "severity": "MEDIUM", "cvss_score": "4.5", "short_description": "# DOMPurify allows Cross site Scripting (XSS)\nDOMPurify before 3.2.4 has an incorrect template literal regular expression, sometimes leading to mutation cross site scripting (mXSS).\nUpgrade to version 3.2.4 or later", "related_urls": [], "occurrence_count": 0, "reachable_flows": 0}
{"id": "NPM-1102309", "package": "npm:elliptic", "purl": "pkg:npm/elliptic@6.6.0", "package_type": "npm", "package_usage": "N/A", "version": "6.6.0", "fix_version": "6.6.1", "severity": "CRITICAL", "cvss_score": "9.0", "short_description": "# Elliptic's private key extraction in ECDSA upon signing a malformed input (e.g. a string)\n### Summary\n\nPrivate key can be extracted from ECDSA signature upon signing a malformed input (e.g. a string or a number), which could e.g. come from JSON network input\n\nNote that `elliptic` by design accepts hex strings as one of the possible input types\n\n### Details\n\nIn this code: https://github.com/indutny/elliptic/blob/3e46a48fdd2ef2f89593e5e058d85530578c9761/lib/elliptic/ec/index.js#L100 L107\n\n`msg` is a BN instance after conversion, but `nonce` is an array, and different BN instances could generate equivalent arrays after conversion.\n\nMeaning that a same `nonce` could be generated for different messages used in signing process, leading to `k` reuse, leading to private key extraction from a pair of signatures\n\nSuch a message can be constructed for any already known message/signature pair, meaning that the attack needs only a single malicious message being signed for a full key extraction\n\nWhile signing unverified attacker controlled messages would be problematic itself (and exploitation of this needs such a scenario), signing a single message still _should not_ leak the private key\n\nAlso, message validation could have the same bug (out of scope for this report, but could be possible in some situations), which makes this attack more likely when used in a chain\n\n### PoC\n\n#### `k` reuse example\n\n```js\nimport elliptic from 'elliptic'\n\nconst { ec: EC } = elliptic\n\nconst privateKey = crypto.getRandomValues(new Uint8Array(32))\nconst curve = 'ed25519' // or any other curve, e.g. secp256k1\nconst ec = new EC(curve)\nconst prettyprint = ({ r, s }) => `r: ${r}, s: ${s}`\nconst sig0 = prettyprint(ec.sign(Buffer.alloc(32, 1), privateKey)) // array of ones\nconst sig1 = prettyprint(ec.sign('01'.repeat(32), privateKey)) // same message in hex form\nconst sig2 = prettyprint(ec.sign(' ' + '01'.repeat(32), privateKey)) // same `r`, different `s`\nconsole.log({ sig0, sig1, sig2 })\n```\n\n#### Full attack\n\nThis doesn't include code for generation/recovery on a purpose (bit it's rather trivial)\n\n```js\nimport elliptic from 'elliptic'\n\nconst { ec: EC } = elliptic\n\nconst privateKey = crypto.getRandomValues(new Uint8Array(32))\nconst curve = 'secp256k1' // or any other curve, e.g. ed25519\nconst ec = new EC(curve)\n\n// Any message, e.g. previously known signature\nconst msg0 = crypto.getRandomValues(new Uint8Array(32))\nconst sig0 = ec.sign(msg0, privateKey)\n\n// Attack\nconst msg1 = funny(msg0) // this is a string here, but can also be of other non Uint8Array types\nconst sig1 = ec.sign(msg1, privateKey)\n\nconst something = extract(msg0, sig0, sig1, curve)\n\nconsole.log('Curve:', curve)\nconsole.log('Typeof:', typeof msg1)\nconsole.log('Keys equal?', Buffer.from(privateKey).toString('hex') === something)\nconst rnd = crypto.getRandomValues(new Uint8Array(32))\nconst st = (x) => JSON.stringify(x)\nconsole.log('Keys equivalent?', st(ec.sign(rnd, something).toDER()) === st(ec.sign(rnd, privateKey).toDER()))\nconsole.log('Orig key:', Buffer.from(privateKey).toString('hex'))\nconsole.log('Restored:', something)\n```\n\nOutput:\n```console\nCurve: secp256k1\nTypeof: string\nKeys equal? true\nKeys equivalent? true\nOrig key: c7870f7eb3e8fd5155d5c8cdfca61aa993eed1fbe5b41feef69a68303248c22a\nRestored: c7870f7eb3e8fd5155d5c8cdfca61aa993eed1fbe5b41feef69a68303248c22a\n```\n\nSimilar for `ed25519`, but due to low `n`, the key might not match precisely but is nevertheless equivalent for signing:\n```console\nCurve: ed25519\nTypeof: string\nKeys equal? false\nKeys equivalent? true\nOrig key: f1ce0e4395592f4de24f6423099e022925ad5d2d7039b614aaffdbb194a0d189\nRestored: 01ce0e4395592f4de24f6423099e0227ec9cb921e3b7858581ec0d26223966a6\n```\n`restored` is equal to `orig` mod `N`.\n\n### Impact\n\nFull private key extraction when signing a single malicious message (that passes `JSON.stringify`/`JSON.parse`)\nUpgrade to version 6.6.1 or later", "related_urls": [], "occurrence_count": 0, "reachable_flows": 0}
{"id": "NPM-1102341", "package": "npm:esbuild", "purl": "pkg:npm/esbuild@0.24.0", "package_type": "npm", "package_usage": "N/A", "version": "0.24.0", "fix_version": "0.25.0", "severity": "MEDIUM", "cvss_score": "5.3", "short_description": "# esbuild enables any website to send any requests to the development server and read the response\n### Summary\n\nesbuild allows any websites to send any request to the development server and read the response due to default CORS settings.\n\n### Details\n\nesbuild sets `Access Control Allow Origin: *` header to all requests, including the SSE connection, which allows any websites to send any request to the development server and read the response.\n\nhttps://github.com/evanw/esbuild/blob/df815ac27b84f8b34374c9182a93c94718f8a630/pkg/api/serve_other.go#L121\nhttps://github.com/evanw/esbuild/blob/df815ac27b84f8b34374c9182a93c94718f8a630/pkg/api/serve_other.go#L363\n\n**Attack scenario**:\n\n1. The attacker serves a malicious web page (`http://malicious.example.com`).\n1. The user accesses the malicious web page.\n1. The attacker sends a `fetch('http://127.0.0.1:8000/main.js')` request by JS in that malicious web page. This request is normally blocked by same origin policy, but that's not the case for the reasons above.\n1. The attacker gets the content of `http://127.0.0.1:8000/main.js`.\n\nIn this scenario, I assumed that the attacker knows the URL of the bundle output file name. But the attacker can also get that information by\n\n\tFetching `/index.html`: normally you have a script tag here\n\tFetching `/assets`: it's common to have a `assets` directory when you have JS files and CSS files in a different directory and the directory listing feature tells the attacker the list of files\n\tConnecting `/esbuild` SSE endpoint: the SSE endpoint sends the URL path of the changed files when the file is changed (`new EventSource('/esbuild').addEventListener('change', e => console.log(e.type, e.data))`)\n\tFetching URLs in the known file: once the attacker knows one file, the attacker can know the URLs imported from that file\n\nThe scenario above fetches the compiled content, but if the victim has the source map option enabled, the attacker can also get the non compiled content by fetching the source map file.\n\n### PoC\n\n1. Download [reproduction.zip (https://github.com/user attachments/files/18561484/reproduction.zip)\n2. Extract it and move to that directory\n1. Run `npm i`\n1. Run `npm run watch`\n1. Run `fetch('http://127.0.0.1:8000/app.js').then(r => r.text()).then(content => console.log(content))` in a different website's dev tools.\n\n![image (https://github.com/user attachments/assets/08fc2e4d e1ec 44ca b0ea 78a73c3c40e9)\n\n### Impact\n\nUsers using the serve feature may get the source code stolen by malicious websites.\nUpgrade to version 0.25.0 or later", "related_urls": [], "occurrence_count": 0, "reachable_flows": 0}
{"id": "CVE-2021-32804", "package": "npm:tar", "purl": "pkg:npm/tar@6.2.1", "package_type": "npm", "package_usage": "N/A", "version": "6.2.1", "fix_version": "3.2.2", "severity": "HIGH", "cvss_score": "8.2", "short_description": "# Arbitrary File Creation/Overwrite due to insufficient absolute path sanitization\n### Impact\n\nArbitrary File Creation, Arbitrary File Overwrite, Arbitrary Code Execution\n\n`node-tar` aims to prevent extraction of absolute file paths by turning absolute paths into relative paths when the `preservePaths` flag is not set to `true`. This is achieved by stripping the absolute path root from any absolute file paths contained in a tar file. For example `/home/user/.bashrc` would turn into `home/user/.bashrc`. \n\nThis logic was insufficient when file paths contained repeated path roots such as `////home/user/.bashrc`. `node-tar` would only strip a single path root from such paths. When given an absolute file path with repeating path roots, the resulting path (e.g. `///home/user/.bashrc`) would still resolve to an absolute path, thus allowing arbitrary file creation and overwrite. \n\n### Patches\n\n3.2.2 || 4.4.14 || 5.0.6 || 6.1.1\n\nNOTE: an adjacent issue [CVE-2021-32803](https://github.com/npm/node-tar/security/advisories/GHSA-r628-mhmh-qjhw) affects this release level. Please ensure you update to the latest patch levels that address CVE-2021-32803 as well if this adjacent issue affects your `node-tar` use case.\n\n### Workarounds\n\nUsers may work around this vulnerability without upgrading by creating a custom `onentry` method which sanitizes the `entry.path` or a `filter` method which removes entries with absolute paths.\n\n```js\nconst path = require('path')\nconst tar = require('tar')\n\ntar.x({\n\tfile: 'archive.tgz',\n\t// either add this function...\n\tonentry: (entry) => {\n\t\tif (path.isAbsolute(entry.path)) {\n\t\t\tentry.path = sanitizeAbsolutePathSomehow(entry.path)\n\t\t\tentry.absolute = path.resolve(entry.path)\n\t\t}\n\t},\n\n\t// or this one\n\tfilter: (file, entry) => {\n\t\tif (path.isAbsolute(entry.path)) {\n\t\t\treturn false\n\t\t} else {\n\t\t\treturn true\n\t\t}\n\t}\n})\n```\n\nUsers are encouraged to upgrade to the latest patch versions, rather than attempt to sanitize tar input themselves.", "related_urls": ["https://github.com/npm/node-tar/security/advisories/GHSA-3jfq-g458-7qm9", "https://nvd.nist.gov/vuln/detail/CVE-2021-32804", "https://github.com/npm/node-tar/commit/1f036ca23f64a547bdd6c79c1a44bc62e8115da4", "https://cert-portal.siemens.com/productcert/pdf/ssa-389290.pdf", "https://github.com/npm/node-tar", "https://www.npmjs.com/advisories/1770", "https://www.npmjs.com/package/tar", "https://www.oracle.com/security-alerts/cpuoct2021.html"], "occurrence_count": 0, "reachable_flows": 0}
{"id": "CVE-2013-4357", "package": "suse:pam-modules", "purl": "suse:pam-modules", "package_type": "suse", "package_usage": "N/A", "version": null, "fix_version": "11-1.18.1", "severity": "HIGH", "cvss_score": "7.5", "short_description": "The eglibc package before 2.14 incorrectly handled the getaddrinfo() function. An attacker could use this issue to cause a denial of service.", "related_urls": ["https://www.suse.com/security/cve/CVE-2013-4357.html", "https://bugzilla.suse.com/844309", "https://bugzilla.suse.com/883217", "https://bugzilla.suse.com/903057"], "occurrence_count": 0, "reachable_flows": 0}
{"id": "CVE-2012-3480", "package": "suse:pam-modules", "purl": "suse:pam-modules", "package_type": "suse", "package_usage": "N/A", "version": null, "fix_version": "11-1.18.1", "severity": "MEDIUM", "cvss_score": "5.0", "short_description": "Multiple integer overflows in the (1) strtod, (2) strtof, (3) strtold, (4) strtod_l, and other unspecified \"related functions\" in stdlib in GNU C Library (aka glibc or libc6) 2.16 allow local users to cause a denial of service (application crash) and possibly execute arbitrary code via a long string, which triggers a stack-based buffer overflow.", "related_urls": ["https://www.suse.com/security/cve/CVE-2012-3480.html", "https://bugzilla.suse.com/775690", "https://bugzilla.suse.com/826666", "https://bugzilla.suse.com/968660"], "occurrence_count": 0, "reachable_flows": 0}
{"id": "CVE-2014-7817", "package": "suse:pam-modules", "purl": "suse:pam-modules", "package_type": "suse", "package_usage": "N/A", "version": null, "fix_version": "11-1.18.1", "severity": "MEDIUM", "cvss_score": "5.0", "short_description": "The wordexp function in GNU C Library (aka glibc) 2.21 does not enforce the WRDE_NOCMD flag, which allows context-dependent attackers to execute arbitrary commands, as demonstrated by input containing \"$((`...`))\".", "related_urls": ["https://www.suse.com/security/cve/CVE-2014-7817.html", "https://bugzilla.suse.com/906371"], "occurrence_count": 0, "reachable_flows": 0}
{"id": "CVE-2013-4332", "package": "suse:pam-modules", "purl": "suse:pam-modules", "package_type": "suse", "package_usage": "N/A", "version": null, "fix_version": "11-1.18.1", "severity": "MEDIUM", "cvss_score": "5.0", "short_description": "Multiple integer overflows in malloc/malloc.c in the GNU C Library (aka glibc or libc6) 2.18 and earlier allow context-dependent attackers to cause a denial of service (heap corruption) via a large value to the (1) pvalloc, (2) valloc, (3) posix_memalign, (4) memalign, or (5) aligned_alloc functions.", "related_urls": ["https://www.suse.com/security/cve/CVE-2013-4332.html", "https://bugzilla.suse.com/1123874", "https://bugzilla.suse.com/839870", "https://bugzilla.suse.com/882910"], "occurrence_count": 0, "reachable_flows": 0}
{"id": "CVE-2018-20834", "package": "npm:tar", "purl": "pkg:npm/tar@6.2.1", "package_type": "npm", "package_usage": "N/A", "version": "6.2.1", "fix_version": "2.2.2", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# Arbitrary File Overwrite in tar\nVersions of `tar` prior to 4.4.2 for 4.x and 2.2.2 for 2.x are vulnerable to Arbitrary File Overwrite. Extracting tarballs containing a hardlink to a file that already exists in the system, and a file that matches the hardlink will overwrite the system's file with the contents of the extracted file.\n\n\n## Recommendation\n\nFor tar 4.x, upgrade to version 4.4.2 or later.\nFor tar 2.x, upgrade to version 2.2.2 or later.", "related_urls": ["https://nvd.nist.gov/vuln/detail/CVE-2018-20834", "https://github.com/npm/node-tar/commit/7ecef07da6a9e72cc0c4d0c9c6a8e85b6b52395d", "https://github.com/npm/node-tar/commit/b0c58433c22f5e7fe8b1c76373f27e3f81dcd4c8", "https://hackerone.com/reports/344595", "https://access.redhat.com/errata/RHSA-2019:1821", "https://github.com/isaacs/node-tar", "https://github.com/npm/node-tar/commits/v2.2.2", "https://github.com/npm/node-tar/compare/58a8d43...a5f7779"], "occurrence_count": 0, "reachable_flows": 0}
{"id": "CVE-2013-4788", "package": "suse:pam-modules", "purl": "suse:pam-modules", "package_type": "suse", "package_usage": "N/A", "version": null, "fix_version": "11-1.18.1", "severity": "MEDIUM", "cvss_score": "5.0", "short_description": "The PTR_MANGLE implementation in the GNU C Library (aka glibc or libc6) 2.4, 2.17, and earlier, and Embedded GLIBC (EGLIBC) does not initialize the random value for the pointer guard, which makes it easier for context-dependent attackers to control execution flow by leveraging a buffer-overflow vulnerability in an application and using the known zero value pointer guard to calculate a pointer address.", "related_urls": ["https://www.suse.com/security/cve/CVE-2013-4788.html", "https://bugzilla.suse.com/1123874", "https://bugzilla.suse.com/830268", "https://bugzilla.suse.com/882910", "https://bugzilla.suse.com/950944"], "occurrence_count": 0, "reachable_flows": 0}
{"id": "CVE-2016-10539", "package": "npm:negotiator", "purl": "pkg:npm/negotiator@0.6.3", "package_type": "npm", "package_usage": "N/A", "version": "0.6.3", "fix_version": "0.6.1", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# Regular Expression Denial of Service in negotiator\nAffected versions of `negotiator` are vulnerable to regular expression denial of service attacks, which trigger upon parsing a specially crafted `Accept-Language` header value.\n\n\n\n\n## Recommendation\n\nUpdate to version 0.6.1 or later.", "related_urls": ["https://nvd.nist.gov/vuln/detail/CVE-2016-10539", "https://github.com/advisories/GHSA-7mc5-chhp-fmc3", "https://www.npmjs.com/advisories/106"], "occurrence_count": 0, "reachable_flows": 0}
{"id": "CVE-2014-9402", "package": "suse:pam-modules", "purl": "suse:pam-modules", "package_type": "suse", "package_usage": "N/A", "version": null, "fix_version": "11-1.18.1", "severity": "HIGH", "cvss_score": "7.5", "short_description": "The nss_dns implementation of getnetbyname in GNU C Library (aka glibc) before 2.21, when the DNS backend in the Name Service Switch configuration is enabled, allows remote attackers to cause a denial of service (infinite loop) by sending a positive answer while a network name is being process.", "related_urls": ["https://www.suse.com/security/cve/CVE-2014-9402.html", "https://bugzilla.suse.com/910599"], "occurrence_count": 0, "reachable_flows": 0}
{"id": "CVE-2023-26136", "package": "npm:tough-cookie", "purl": "pkg:npm/tough-cookie@2.4.3", "package_type": "npm", "package_usage": "N/A", "version": "2.4.3", "fix_version": "4.1.3", "severity": "MEDIUM", "cvss_score": "6.5", "short_description": "# tough-cookie Prototype Pollution vulnerability\nVersions of the package tough-cookie before 4.1.3 are vulnerable to Prototype Pollution due to improper handling of Cookies when using CookieJar in `rejectPublicSuffixes=false` mode. This issue arises from the manner in which the objects are initialized.", "related_urls": ["https://nvd.nist.gov/vuln/detail/CVE-2023-26136", "https://github.com/salesforce/tough-cookie/issues/282", "https://github.com/salesforce/tough-cookie/commit/12d474791bb856004e858fdb1c47b7608d09cf6e", "https://github.com/salesforce/tough-cookie", "https://github.com/salesforce/tough-cookie/releases/tag/v4.1.3", "https://lists.debian.org/debian-lts-announce/2023/07/msg00010.html", "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/3HUE6ZR5SL73KHL7XUPAOEL6SB7HUDT2", "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/6PVVPNSAGSDS63HQ74PJ7MZ3MU5IYNVZ", "https://security.snyk.io/vuln/SNYK-JS-TOUGHCOOKIE-5672873"], "occurrence_count": 0, "reachable_flows": 0}
{"id": "CVE-2017-1000048", "package": "npm:qs", "purl": "pkg:npm/qs@6.13.0", "package_type": "npm", "package_usage": "N/A", "version": "6.13.0", "fix_version": "6.0.4", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# Prototype Pollution Protection Bypass in qs\nAffected version of `qs` are vulnerable to Prototype Pollution because it is possible to bypass the protection. The `qs.parse` function fails to properly prevent an object's prototype to be altered when parsing arbitrary input. Input containing `[` or `]` may bypass the prototype pollution protection and alter the Object prototype. This allows attackers to override properties that will exist in all objects, which may lead to Denial of Service or Remote Code Execution in specific circumstances.\n\n\n## Recommendation\n\nUpgrade to 6.0.4, 6.1.2, 6.2.3, 6.3.2 or later.", "related_urls": ["https://nvd.nist.gov/vuln/detail/CVE-2017-1000048", "https://github.com/ljharb/qs/issues/200", "https://github.com/ljharb/qs/commit/beade029171b8cef9cee0d03ebe577e2dd84976d", "https://access.redhat.com/errata/RHSA-2017:2672", "https://github.com/ljharb/qs", "https://snyk.io/vuln/npm:qs:20170213", "https://www.npmjs.com/advisories/1469"], "occurrence_count": 0, "reachable_flows": 0}
{"id": "CVE-2012-3405", "package": "suse:pam-modules", "purl": "suse:pam-modules", "package_type": "suse", "package_usage": "N/A", "version": null, "fix_version": "11-1.18.1", "severity": "MEDIUM", "cvss_score": "5.0", "short_description": "The vfprintf function in stdio-common/vfprintf.c in libc in GNU C Library (aka glibc) 2.14 and other versions does not properly calculate a buffer length, which allows context-dependent attackers to bypass the FORTIFY_SOURCE format-string protection mechanism and cause a denial of service (segmentation fault and crash) via a format string with a large number of format specifiers that triggers \"desynchronization within the buffer size handling,\" a different vulnerability than CVE-2012-3404.", "related_urls": ["https://www.suse.com/security/cve/CVE-2012-3405.html", "https://bugzilla.suse.com/770891"], "occurrence_count": 0, "reachable_flows": 0}
{"id": "CVE-2017-16138", "package": "npm:mime", "purl": "pkg:npm/mime@1.3.4", "package_type": "npm", "package_usage": "N/A", "version": "1.3.4", "fix_version": "1.4.1", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# mime Regular Expression Denial of Service when MIME lookup performed on untrusted user input\nAffected versions of `mime` are vulnerable to regular expression denial of service when a mime lookup is performed on untrusted user input.\n\n\n## Recommendation\n\nUpdate to version 2.0.3 or later.", "related_urls": ["https://nvd.nist.gov/vuln/detail/CVE-2017-16138", "https://github.com/broofa/node-mime/issues/167", "https://github.com/broofa/mime/commit/1df903fdeb9ae7eaa048795b8d580ce2c98f40b0", "https://github.com/broofa/mime/commit/855d0c4b8b22e4a80b9401a81f2872058eae274d", "https://github.com/broofa/mime"], "occurrence_count": 0, "reachable_flows": 0}
{"id": "CVE-2013-4237", "package": "suse:pam-modules", "purl": "suse:pam-modules", "package_type": "suse", "package_usage": "N/A", "version": null, "fix_version": "11-1.18.1", "severity": "MEDIUM", "cvss_score": "5.0", "short_description": "sysdeps/posix/readdir_r.c in the GNU C Library (aka glibc or libc6) 2.18 and earlier allows context-dependent attackers to cause a denial of service (out-of-bounds write and crash) or possibly execute arbitrary code via a crafted (1) NTFS or (2) CIFS image.", "related_urls": ["https://www.suse.com/security/cve/CVE-2013-4237.html", "https://bugzilla.suse.com/834594", "https://bugzilla.suse.com/882910", "https://bugzilla.suse.com/883022"], "occurrence_count": 0, "reachable_flows": 0}
{"id": "CVE-2015-0235", "package": "suse:pam-modules", "purl": "suse:pam-modules", "package_type": "suse", "package_usage": "N/A", "version": null, "fix_version": "11-1.18.1", "severity": "CRITICAL", "cvss_score": "9.0", "short_description": "Heap-based buffer overflow in the __nss_hostname_digits_dots function in glibc 2.2, and other 2.x versions before 2.18, allows context-dependent attackers to execute arbitrary code via vectors related to the (1) gethostbyname or (2) gethostbyname2 function, aka \"GHOST.\"", "related_urls": ["https://www.suse.com/security/cve/CVE-2015-0235.html", "https://bugzilla.suse.com/844309", "https://bugzilla.suse.com/913646", "https://bugzilla.suse.com/949238", "https://bugzilla.suse.com/954983"], "occurrence_count": 0, "reachable_flows": 0}
{"id": "CVE-2020-15366", "package": "npm:ajv", "purl": "pkg:npm/ajv@6.12.6", "package_type": "npm", "package_usage": "N/A", "version": "6.12.6", "fix_version": "6.12.3", "severity": "MEDIUM", "cvss_score": "5.6", "short_description": "# Prototype Pollution in Ajv\nAn issue was discovered in ajv.validate() in Ajv (aka Another JSON Schema Validator) 6.12.2. A carefully crafted JSON schema could be provided that allows execution of other code by prototype pollution. (While untrusted schemas are recommended against, the worst case of an untrusted schema should be a denial of service, not execution of code.)", "related_urls": ["https://nvd.nist.gov/vuln/detail/CVE-2020-15366", "https://github.com/ajv-validator/ajv/commit/65b2f7d76b190ac63a0d4e9154c712d7aa37049f", "https://github.com/ajv-validator/ajv", "https://github.com/ajv-validator/ajv/releases/tag/v6.12.3", "https://github.com/ajv-validator/ajv/tags", "https://hackerone.com/bugs?subject=user&report_id=894259"], "occurrence_count": 0, "reachable_flows": 0}
{"id": "CVE-2023-2603", "package": "debian:libcap2", "purl": "debian:libcap2", "package_type": "debian", "package_usage": "N/A", "version": null, "fix_version": "2.66-4", "severity": "MEDIUM", "cvss_score": "5.0", "short_description": "A vulnerability was found in libcap. This issue occurs in the _libcap_ ...\nNOTE: https://sites.google.com/site/fullycapable/release-notes-for-libcap#h.iuvg7sbjg8pe\nNOTE: https://www.x41-dsec.de/static/reports/X41-libcap-Code-Review-2023-OSTIF-Final-Report.pdf\nNOTE: https://www.openwall.com/lists/oss-security/2023/05/15/4\nNOTE: Fixed by: https://git.kernel.org/pub/scm/libs/libcap/libcap.git/commit/?id=422bec25ae4a1ab03fd4d6f728695ed279173b18 (libcap-2.69)", "related_urls": [], "occurrence_count": 0, "reachable_flows": 0}
{"id": "MAL-2022-6280", "package": "npm:ss2", "purl": "npm:ss2", "package_type": "npm", "package_usage": "N/A", "version": null, "fix_version": null, "severity": "LOW", "cvss_score": "2.0", "short_description": "# Malicious code in ss2 (npm)\n\n---\n_-= Per source details. Do not edit below this line.=-_\n\n## Source: ghsa-malware (2437321e4b5e0de0740b6c2539011e629dc45486c7ac3c94bd901d613c1d2c32)\nAny computer that has this package installed or running should be considered fully compromised. All secrets and keys stored on that computer should be rotated immediately from a different computer. The package should be removed, but as full control of the computer may have been given to an outside entity, there is no guarantee that removing the package will remove all malicious software resulting from installing it.", "related_urls": ["https://github.com/advisories/GHSA-jm6m-3w2v-7q2q"], "occurrence_count": 0, "reachable_flows": 0}
{"id": "CVE-2021-23807", "package": "npm:jsonpointer", "purl": "pkg:npm/jsonpointer@4.1.0", "package_type": "npm", "package_usage": "N/A", "version": "4.1.0", "fix_version": "5.0.0", "severity": "MEDIUM", "cvss_score": "5.6", "short_description": "# Prototype Pollution in node-jsonpointer\nThis affects the package `jsonpointer` before `5.0.0`. A type confusion vulnerability can lead to a bypass of a previous Prototype Pollution fix when the pointer components are arrays.\n\n## Related CVE(s)\nCVE-2021-23807, SNYK-JAVA-ORGWEBJARSNPM-1910273, SNYK-JS-JSONPOINTER-1577288", "related_urls": ["https://nvd.nist.gov/vuln/detail/CVE-2021-23807", "https://github.com/janl/node-jsonpointer/pull/51", "https://github.com/janl/node-jsonpointer/commit/a0345f3550cd9c4d89f33b126390202b89510ad4", "https://github.com/janl/node-jsonpointer", "https://snyk.io/vuln/SNYK-JS-JSONPOINTER-1577288"], "occurrence_count": 0, "reachable_flows": 0}
{"id": "CVE-2022-25883", "package": "npm:semver", "purl": "pkg:npm/semver@6.3.1", "package_type": "npm", "package_usage": "N/A", "version": "6.3.1", "fix_version": "5.7.2", "severity": "MEDIUM", "cvss_score": "5.3", "short_description": "# semver vulnerable to Regular Expression Denial of Service\nVersions of the package semver before 7.5.2 on the 7.x branch, before 6.3.1 on the 6.x branch, and all other versions before 5.7.2 are vulnerable to Regular Expression Denial of Service (ReDoS) via the function new Range, when untrusted user data is provided as a range.", "related_urls": ["https://nvd.nist.gov/vuln/detail/CVE-2022-25883", "https://github.com/npm/node-semver/pull/564", "https://github.com/npm/node-semver/pull/585", "https://github.com/npm/node-semver/pull/593", "https://github.com/npm/node-semver/commit/2f8fd41487acf380194579ecb6f8b1bbfe116be0", "https://github.com/npm/node-semver/commit/717534ee353682f3bcf33e60a8af4292626d4441", "https://github.com/npm/node-semver/commit/928e56d21150da0413a3333a3148b20e741a920c", "https://github.com/npm/node-semver", "https://github.com/npm/node-semver/blob/main/classes/range.js#L97-L104", "https://github.com/npm/node-semver/blob/main/internal/re.js#L138", "https://github.com/npm/node-semver/blob/main/internal/re.js#L160", "https://security.snyk.io/vuln/SNYK-JS-SEMVER-3247795"], "occurrence_count": 0, "reachable_flows": 0}
{"id": "CVE-2022-23540", "package": "npm:jsonwebtoken", "purl": "pkg:npm/jsonwebtoken@8.5.1", "package_type": "npm", "package_usage": "N/A", "version": "8.5.1", "fix_version": "9.0.0", "severity": "MEDIUM", "cvss_score": "6.4", "short_description": "# jsonwebtoken vulnerable to signature validation bypass due to insecure default algorithm in jwt.verify()\n# Overview\n\nIn versions <=8.5.1 of jsonwebtoken library, lack of algorithm definition and a falsy secret or key in the `jwt.verify()` function can lead to signature validation bypass due to defaulting to the `none` algorithm for signature verification.\n\n# Am I affected?\nYou will be affected if all the following are true in the `jwt.verify()` function:\n- a token with no signature is received\n- no algorithms are specified \n- a falsy (e.g. null, false, undefined) secret or key is passed \n\n# How do I fix it?\n \nUpdate to version 9.0.0 which removes the default support for the none algorithm in the `jwt.verify()` method. \n\n# Will the fix impact my users?\n\nThere will be no impact, if you update to version 9.0.0 and you don\u2019t need to allow for the `none` algorithm. If you need 'none' algorithm, you have to explicitly specify that in `jwt.verify()` options.", "related_urls": ["https://github.com/auth0/node-jsonwebtoken/security/advisories/GHSA-qwph-4952-7xr6", "https://nvd.nist.gov/vuln/detail/CVE-2022-23540", "https://github.com/auth0/node-jsonwebtoken/commit/e1fa9dcc12054a8681db4e6373da1b30cf7016e3", "https://github.com/auth0/node-jsonwebtoken"], "occurrence_count": 0, "reachable_flows": 0}
{"id": "GHSA-wxgw-qj99-44c2", "package": "npm:node-forge", "purl": "pkg:npm/node-forge@0.7.6", "package_type": "npm", "package_usage": "N/A", "version": "0.7.6", "fix_version": "0.10.0", "severity": "LOW", "cvss_score": "2.0", "short_description": "# Prototype Pollution in node-forge util.setPath API\n### Impact\n`forge.util.setPath` had a potential prototype pollution issue if called with untrusted keys. This API was not used by forge itself.\n\n### Patches\nThe `forge.util.setPath` API and related functions were removed in 0.10.0.\n\n### Workarounds\nDon't call `forge.util.setPath` directly or indirectly with untrusted keys.\n\n### References\n- https://security.snyk.io/vuln/SNYK-JS-NODEFORGE-598677\n- https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-7720\n\n### For more information\nIf you have any questions or comments about this advisory:\n* Open an issue in [forge](https://github.com/digitalbazaar/forge).\n* Email us at support@digitalbazaar.com.", "related_urls": ["https://github.com/digitalbazaar/forge/security/advisories/GHSA-wxgw-qj99-44c2"], "occurrence_count": 0, "reachable_flows": 0}
{"id": "CVE-2023-45857", "package": "npm:axios", "purl": "pkg:npm/axios@0.26.1", "package_type": "npm", "package_usage": "N/A", "version": "0.26.1", "fix_version": "0.28.0", "severity": "MEDIUM", "cvss_score": "6.5", "short_description": "# Axios Cross-Site Request Forgery Vulnerability\nAn issue discovered in Axios 0.8.1 through 1.5.1 inadvertently reveals the confidential XSRF-TOKEN stored in cookies by including it in the HTTP header X-XSRF-TOKEN for every request made to any host allowing attackers to view sensitive information.", "related_urls": ["https://nvd.nist.gov/vuln/detail/CVE-2023-45857", "https://github.com/axios/axios/issues/6006", "https://github.com/axios/axios/issues/6022", "https://github.com/axios/axios/pull/6028", "https://github.com/axios/axios/pull/6091", "https://github.com/axios/axios/commit/2755df562b9c194fba6d8b609a383443f6a6e967", "https://github.com/axios/axios/commit/96ee232bd3ee4de2e657333d4d2191cd389e14d0", "https://github.com/axios/axios", "https://github.com/axios/axios/releases/tag/v0.28.0", "https://github.com/axios/axios/releases/tag/v1.6.0", "https://security.snyk.io/vuln/SNYK-JS-AXIOS-6032459"], "occurrence_count": 0, "reachable_flows": 0}
{"id": "CVE-2017-16119", "package": "npm:fresh", "purl": "pkg:npm/fresh@0.5.2", "package_type": "npm", "package_usage": "N/A", "version": "0.5.2", "fix_version": "0.5.2", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# Regular Expression Denial of Service in fresh\nAffected versions of `fresh` are vulnerable to regular expression denial of service when parsing specially crafted user input.\n\n\n## Recommendation\n\nUpdate to version 0.5.2 or later.", "related_urls": ["https://nvd.nist.gov/vuln/detail/CVE-2017-16119", "https://github.com/advisories/GHSA-9qj9-36jm-prpv", "https://www.npmjs.com/advisories/526"], "occurrence_count": 0, "reachable_flows": 0}
{"id": "CVE-2013-7423", "package": "suse:pam-modules", "purl": "suse:pam-modules", "package_type": "suse", "package_usage": "N/A", "version": null, "fix_version": "11-1.18.1", "severity": "MEDIUM", "cvss_score": "5.0", "short_description": "The send_dg function in resolv/res_send.c in GNU C Library (aka glibc or libc6) before 2.20 does not properly reuse file descriptors, which allows remote attackers to send DNS queries to unintended locations via a large number of requests that trigger a call to the getaddrinfo function.", "related_urls": ["https://www.suse.com/security/cve/CVE-2013-7423.html", "https://bugzilla.suse.com/1123874", "https://bugzilla.suse.com/915526"], "occurrence_count": 0, "reachable_flows": 0}
{"id": "CVE-2022-24771", "package": "npm:node-forge", "purl": "pkg:npm/node-forge@0.7.6", "package_type": "npm", "package_usage": "N/A", "version": "0.7.6", "fix_version": "1.3.0", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# Improper Verification of Cryptographic Signature in node-forge\n### Impact\n\nRSA PKCS#1 v1.5 signature verification code is lenient in checking the digest algorithm structure. This can allow a crafted structure that steals padding bytes and uses unchecked portion of the PKCS#1 encoded message to forge a signature when a low public exponent is being used.\n\n### Patches\n\nThe issue has been addressed in `node-forge` `1.3.0`.\n\n### References\n\nFor more information, please see\n[\"Bleichenbacher's RSA signature forgery based on implementation error\"](https://mailarchive.ietf.org/arch/msg/openpgp/5rnE9ZRN1AokBVj3VqblGlP63QE/)\nby Hal Finney.\n\n### For more information\n\nIf you have any questions or comments about this advisory:\n* Open an issue in [forge](https://github.com/digitalbazaar/forge)\n* Email us at [example email address](mailto:security@digitalbazaar.com)", "related_urls": ["https://github.com/digitalbazaar/forge/security/advisories/GHSA-cfm4-qjh2-4765", "https://nvd.nist.gov/vuln/detail/CVE-2022-24771", "https://github.com/digitalbazaar/forge/commit/3f0b49a0573ef1bb7af7f5673c0cfebf00424df1", "https://github.com/digitalbazaar/forge/commit/bb822c02df0b61211836472e29b9790cc541cdb2", "https://github.com/digitalbazaar/forge"], "occurrence_count": 0, "reachable_flows": 0}
{"id": "CVE-2022-24772", "package": "npm:node-forge", "purl": "pkg:npm/node-forge@0.7.6", "package_type": "npm", "package_usage": "N/A", "version": "0.7.6", "fix_version": "1.3.0", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# Improper Verification of Cryptographic Signature in node-forge\n### Impact\n\nRSA PKCS#1 v1.5 signature verification code does not check for tailing garbage bytes after decoding a `DigestInfo` ASN.1 structure. This can allow padding bytes to be removed and garbage data added to forge a signature when a low public exponent is being used.\n\n### Patches\n\nThe issue has been addressed in `node-forge` `1.3.0`.\n\n### References\n\nFor more information, please see\n[\"Bleichenbacher's RSA signature forgery based on implementation error\"](https://mailarchive.ietf.org/arch/msg/openpgp/5rnE9ZRN1AokBVj3VqblGlP63QE/)\nby Hal Finney.\n\n### For more information\n\nIf you have any questions or comments about this advisory:\n* Open an issue in [forge](https://github.com/digitalbazaar/forge)\n* Email us at [example email address](mailto:security@digitalbazaar.com)", "related_urls": ["https://github.com/digitalbazaar/forge/security/advisories/GHSA-x4jg-mjrx-434g", "https://nvd.nist.gov/vuln/detail/CVE-2022-24772", "https://github.com/digitalbazaar/forge/commit/3f0b49a0573ef1bb7af7f5673c0cfebf00424df1", "https://github.com/digitalbazaar/forge/commit/bb822c02df0b61211836472e29b9790cc541cdb2", "https://github.com/digitalbazaar/forge"], "occurrence_count": 0, "reachable_flows": 0}
{"id": "CVE-2022-23541", "package": "npm:jsonwebtoken", "purl": "pkg:npm/jsonwebtoken@8.5.1", "package_type": "npm", "package_usage": "N/A", "version": "8.5.1", "fix_version": "9.0.0", "severity": "MEDIUM", "cvss_score": "5.0", "short_description": "# jsonwebtoken's insecure implementation of key retrieval function could lead to Forgeable Public/Private Tokens from RSA to HMAC\n# Overview\n\nVersions `<=8.5.1` of `jsonwebtoken` library can be misconfigured so that passing a poorly implemented key retrieval function (referring to the `secretOrPublicKey` argument from the [readme link](https://github.com/auth0/node-jsonwebtoken#jwtverifytoken-secretorpublickey-options-callback)) will result in incorrect verification of tokens. There is a possibility of using a different algorithm and key combination in verification\tthan the one that was used to sign the tokens. Specifically, tokens signed with an asymmetric public key could be verified with a symmetric HS256 algorithm. This can lead to successful validation of forged tokens. \n\n# Am I affected?\n\nYou will be affected if your application is supporting usage of both symmetric key and asymmetric key in jwt.verify() implementation with the same key retrieval function. \n\n# How do I fix it?\n \nUpdate to version 9.0.0.\n\n# Will the fix impact my users?\n\nThere is no impact for end users", "related_urls": ["https://github.com/auth0/node-jsonwebtoken/security/advisories/GHSA-hjrf-2m68-5959", "https://nvd.nist.gov/vuln/detail/CVE-2022-23541", "https://github.com/auth0/node-jsonwebtoken/commit/e1fa9dcc12054a8681db4e6373da1b30cf7016e3", "https://github.com/auth0/node-jsonwebtoken", "https://github.com/auth0/node-jsonwebtoken/releases/tag/v9.0.0"], "occurrence_count": 0, "reachable_flows": 0}
{"id": "GHSA-gf8q-jrpm-jvxq", "package": "npm:node-forge", "purl": "pkg:npm/node-forge@0.7.6", "package_type": "npm", "package_usage": "N/A", "version": "0.7.6", "fix_version": "1.3.0", "severity": "LOW", "cvss_score": "2.0", "short_description": "# URL parsing in node-forge could lead to undesired behavior.\n### Impact\nThe regex used for the `forge.util.parseUrl` API would not properly parse certain inputs resulting in a parsed data structure that could lead to undesired behavior.\n\n### Patches\n`forge.util.parseUrl` and other very old related URL APIs were removed in 1.0.0 in favor of letting applications use the more modern WHATWG URL Standard API.\n\n### Workarounds\nEnsure code does not directly or indirectly call `forge.util.parseUrl` with untrusted input.\n\n### References\n- https://www.huntr.dev/bounties/41852c50-3c6d-4703-8c55-4db27164a4ae/\n\n### For more information\nIf you have any questions or comments about this advisory:\n* Open an issue in [forge](https://github.com/digitalbazaar/forge)\n* Email us at support@digitalbazaar.com", "related_urls": ["https://github.com/digitalbazaar/forge/security/advisories/GHSA-gf8q-jrpm-jvxq", "https://nvd.nist.gov/vuln/detail/CVE-2022-0122", "https://github.com/digitalbazaar/forge", "https://www.huntr.dev/bounties/41852c50-3c6d-4703-8c55-4db27164a4ae"], "occurrence_count": 0, "reachable_flows": 0}
{"id": "CVE-2021-3918", "package": "npm:json-schema", "purl": "pkg:npm/json-schema@0.2.3", "package_type": "npm", "package_usage": "N/A", "version": "0.2.3", "fix_version": "0.4.0", "severity": "CRITICAL", "cvss_score": "9.8", "short_description": "# json-schema is vulnerable to Prototype Pollution\njson-schema before version 0.4.0 is vulnerable to Improperly Controlled Modification of Object Prototype Attributes ('Prototype Pollution').", "related_urls": ["https://nvd.nist.gov/vuln/detail/CVE-2021-3918", "https://github.com/kriszyp/json-schema/commit/22f146111f541d9737e832823699ad3528ca7741", "https://github.com/kriszyp/json-schema/commit/b62f1da1ff5442f23443d6be6a92d00e65cba93a", "https://github.com/kriszyp/json-schema/commit/f6f6a3b02d667aa4ba2d5d50cc19208c4462abfa", "https://github.com/kriszyp/json-schema", "https://huntr.dev/bounties/bb6ccd63-f505-4e3a-b55f-cd2662c261a9", "https://lists.debian.org/debian-lts-announce/2022/12/msg00013.html"], "occurrence_count": 0, "reachable_flows": 0}
{"id": "GHSA-j4mr-9xw3-c9jx", "package": "npm:base64-url", "purl": "pkg:npm/base64-url@1.2.1", "package_type": "npm", "package_usage": "N/A", "version": "1.2.1", "fix_version": "2.0.0", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# Out-of-bounds Read in base64-url\nVersions of `base64-url` before 2.0.0 are vulnerable to out-of-bounds read as it allocates uninitialized Buffers when number is passed in input.\n\n\n## Recommendation\n\nUpdate to version 2.0.0 or later.", "related_urls": ["https://hackerone.com/reports/321692", "https://www.npmjs.com/advisories/660"], "occurrence_count": 0, "reachable_flows": 0}
{"id": "CVE-2022-23539", "package": "npm:jsonwebtoken", "purl": "pkg:npm/jsonwebtoken@8.5.1", "package_type": "npm", "package_usage": "N/A", "version": "8.5.1", "fix_version": "9.0.0", "severity": "MEDIUM", "cvss_score": "5.0", "short_description": "# jsonwebtoken unrestricted key type could lead to legacy keys usage \n# Overview\n\nVersions `<=8.5.1` of `jsonwebtoken` library could be misconfigured so that legacy, insecure key types are used for signature verification. For example, DSA keys could be used with the RS256 algorithm. \n\n# Am I affected?\n\nYou are affected if you are using an algorithm and a key type other than the combinations mentioned below\n\n| Key type |\talgorithm\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t|\n|----------|------------------------------------------|\n| ec\t\t\t\t\t | ES256, ES384, ES512\t\t\t\t\t\t\t\t\t\t\t|\n| rsa\t\t\t\t\t| RS256, RS384, RS512, PS256, PS384, PS512 |\n| rsa-pss\t| PS256, PS384, PS512\t\t\t\t\t\t\t\t\t\t\t|\n\nAnd for Elliptic Curve algorithms:\n\n| `alg` | Curve\t\t\t|\n|-------|------------|\n| ES256 | prime256v1 |\n| ES384 | secp384r1\t|\n| ES512 | secp521r1\t|\n\n# How do I fix it?\n\nUpdate to version 9.0.0. This version validates for asymmetric key type and algorithm combinations. Please refer to the above mentioned algorithm / key type combinations for the valid secure configuration. After updating to version 9.0.0, If you still intend to continue with signing or verifying tokens using invalid key type/algorithm value combinations, you\u2019ll need to set the `allowInvalidAsymmetricKeyTypes` option\tto `true` in the `sign()` and/or `verify()` functions.\n\n# Will the fix impact my users?\n\nThere will be no impact, if you update to version 9.0.0 and you already use a valid secure combination of key type and algorithm. Otherwise,\tuse the\t`allowInvalidAsymmetricKeyTypes` option\tto `true` in the `sign()` and `verify()` functions to continue usage of invalid key type/algorithm combination in 9.0.0 for legacy compatibility.", "related_urls": ["https://github.com/auth0/node-jsonwebtoken/security/advisories/GHSA-8cf7-32gw-wr33", "https://nvd.nist.gov/vuln/detail/CVE-2022-23539", "https://github.com/auth0/node-jsonwebtoken/commit/e1fa9dcc12054a8681db4e6373da1b30cf7016e3", "https://github.com/auth0/node-jsonwebtoken"], "occurrence_count": 0, "reachable_flows": 0}
{"id": "CVE-2022-24773", "package": "npm:node-forge", "purl": "pkg:npm/node-forge@0.7.6", "package_type": "npm", "package_usage": "N/A", "version": "0.7.6", "fix_version": "1.3.0", "severity": "MEDIUM", "cvss_score": "5.3", "short_description": "# Improper Verification of Cryptographic Signature in `node-forge`\n### Impact\n\nRSA PKCS#1 v1.5 signature verification code is not properly checking `DigestInfo` for a proper ASN.1 structure. This can lead to successful verification with signatures that contain invalid structures but a valid digest.\n\n### Patches\n\nThe issue has been addressed in `node-forge` `1.3.0`.\n\n### For more information\n\nIf you have any questions or comments about this advisory:\n* Open an issue in [forge](https://github.com/digitalbazaar/forge)\n* Email us at [example email address](mailto:security@digitalbazaar.com)", "related_urls": ["https://github.com/digitalbazaar/forge/security/advisories/GHSA-2r2c-g63r-vccr", "https://nvd.nist.gov/vuln/detail/CVE-2022-24773", "https://github.com/digitalbazaar/forge/commit/3f0b49a0573ef1bb7af7f5673c0cfebf00424df1", "https://github.com/digitalbazaar/forge/commit/bb822c02df0b61211836472e29b9790cc541cdb2", "https://github.com/digitalbazaar/forge"], "occurrence_count": 0, "reachable_flows": 0}
{"id": "CVE-2018-6829", "package": "debian:libgcrypt20", "purl": "debian:libgcrypt20", "package_type": "debian", "package_usage": "N/A", "version": null, "fix_version": "", "severity": "LOW", "cvss_score": "2.0", "short_description": "cipher/elgamal.c in Libgcrypt through 1.8.2, when used to encrypt mess ...\nNOTE: https://github.com/weikengchen/attack-on-libgcrypt-elgamal\nNOTE: https://github.com/weikengchen/attack-on-libgcrypt-elgamal/wiki\nNOTE: https://lists.gnupg.org/pipermail/gcrypt-devel/2018-February/004394.html\nNOTE: GnuPG uses ElGamal in hybrid mode only.\nNOTE: This is not a vulnerability in libgcrypt, but in an application using\nNOTE: it in an insecure manner, see also\nNOTE: https://lists.gnupg.org/pipermail/gcrypt-devel/2018-February/004401.html", "related_urls": [], "occurrence_count": 0, "reachable_flows": 0}
{"id": "CVE-2017-16137", "package": "npm:debug", "purl": "pkg:npm/debug@3.2.7", "package_type": "npm", "package_usage": "N/A", "version": "3.2.7", "fix_version": "2.6.9", "severity": "LOW", "cvss_score": "3.7", "short_description": "# Regular Expression Denial of Service in debug\nAffected versions of `debug` are vulnerable to regular expression denial of service when untrusted user input is passed into the `o` formatter. \n\nAs it takes 50,000 characters to block the event loop for 2 seconds, this issue is a low severity issue.\n\nThis was later re-introduced in version v3.2.0, and then repatched in versions 3.2.7 and 4.3.1.\n\n## Recommendation\n\nVersion 2.x.x: Update to version 2.6.9 or later.\nVersion 3.1.x: Update to version 3.1.0 or later.\nVersion 3.2.x: Update to version 3.2.7 or later.\nVersion 4.x.x: Update to version 4.3.1 or later.", "related_urls": ["https://nvd.nist.gov/vuln/detail/CVE-2017-16137", "https://github.com/debug-js/debug/issues/797", "https://github.com/visionmedia/debug/issues/501", "https://github.com/visionmedia/debug/pull/504", "https://github.com/debug-js/debug/commit/4e2150207c568adb9ead8f4c4528016081c88020", "https://github.com/debug-js/debug/commit/71169065b5262f9858ac78cc0b688c84a438f290", "https://github.com/debug-js/debug/commit/b6d12fdbc63b483e5c969da33ea6adc09946b5ac", "https://github.com/debug-js/debug/commit/f53962e944a87e6ca9bb622a2a12dffc22a9bb5a", "https://github.com/visionmedia/debug", "https://lists.apache.org/thread.html/r8ba4c628fba7181af58817d452119481adce4ba92e889c643e4c7dd3@%3Ccommits.netbeans.apache.org%3E", "https://lists.apache.org/thread.html/rb5ac16fad337d1f3bb7079549f97d8166d0ef3082629417c39f12d63@%3Cnotifications.netbeans.apache.org%3E"], "occurrence_count": 0, "reachable_flows": 0}
{"id": "CVE-2011-3172", "package": "suse:pam-modules", "purl": "suse:pam-modules", "package_type": "suse", "package_usage": "N/A", "version": null, "fix_version": "11-1.27.3.1", "severity": "MEDIUM", "cvss_score": "5.0", "short_description": "A vulnerability in pam_modules of SUSE Linux Enterprise allows attackers to log into accounts that should have been disabled. Affected releases are SUSE Linux Enterprise: versions prior to 12.", "related_urls": ["https://www.suse.com/security/cve/CVE-2011-3172.html", "https://bugzilla.suse.com/1149683", "https://bugzilla.suse.com/707645"], "occurrence_count": 0, "reachable_flows": 0}
{"id": "CVE-2017-20162", "package": "npm:ms", "purl": "pkg:npm/ms@2.1.3", "package_type": "npm", "package_usage": "N/A", "version": "2.1.3", "fix_version": "2.0.0", "severity": "MEDIUM", "cvss_score": "5.3", "short_description": "# Vercel ms Inefficient Regular Expression Complexity vulnerability\nA vulnerability, which was classified as problematic, has been found in vercel ms up to 1.x. This issue affects the function parse of the file index.js. The manipulation of the argument str leads to inefficient regular expression complexity. The attack may be initiated remotely. The exploit has been disclosed to the public and may be used. Upgrading to version 2.0.0 is able to address this issue. The name of the patch is caae2988ba2a37765d055c4eee63d383320ee662. It is recommended to upgrade the affected component. The associated identifier of this vulnerability is VDB-217451.", "related_urls": ["https://nvd.nist.gov/vuln/detail/CVE-2017-20162", "https://github.com/vercel/ms/pull/89", "https://github.com/vercel/ms/commit/caae2988ba2a37765d055c4eee63d383320ee662", "https://github.com/vercel/ms", "https://github.com/vercel/ms/releases/tag/2.0.0", "https://vuldb.com/?ctiid.217451", "https://vuldb.com/?id.217451"], "occurrence_count": 0, "reachable_flows": 0}
{"id": "CVE-2013-0242", "package": "suse:pam-modules", "purl": "suse:pam-modules", "package_type": "suse", "package_usage": "N/A", "version": null, "fix_version": "11-1.18.1", "severity": "MEDIUM", "cvss_score": "5.0", "short_description": "Buffer overflow in the extend_buffers function in the regular expression matcher (posix/regexec.c) in glibc, possibly 2.17 and earlier, allows context-dependent attackers to cause a denial of service (memory corruption and crash) via crafted multibyte characters.", "related_urls": ["https://www.suse.com/security/cve/CVE-2013-0242.html", "https://bugzilla.suse.com/801246", "https://bugzilla.suse.com/848783", "https://bugzilla.suse.com/882910"], "occurrence_count": 0, "reachable_flows": 0}
{"id": "CVE-2022-0122", "package": "npm:node-forge", "purl": "pkg:npm/node-forge@0.7.6", "package_type": "npm", "package_usage": "N/A", "version": "0.7.6", "fix_version": "1.3.0", "severity": "MEDIUM", "cvss_score": "6.1", "short_description": "# Open Redirect in node-forge\nparseUrl functionality in node-forge mishandles certain uses of backslash such as `https:/\\/\\/\\` and interprets the URI as a relative path.", "related_urls": ["https://nvd.nist.gov/vuln/detail/CVE-2022-0122", "https://github.com/digitalbazaar/forge/commit/db8016c805371e72b06d8e2edfe0ace0df934a5e", "https://github.com/digitalbazaar/forge", "https://huntr.dev/bounties/41852c50-3c6d-4703-8c55-4db27164a4ae"], "occurrence_count": 0, "reachable_flows": 0}
{"id": "CVE-2024-2236", "package": "debian:libgcrypt20", "purl": "debian:libgcrypt20", "package_type": "debian", "package_usage": "N/A", "version": null, "fix_version": "", "severity": "MEDIUM", "cvss_score": "5.0", "short_description": "A timing-based side-channel flaw was found in libgcrypt's RSA implemen ...\nNOTE: https://bugzilla.redhat.com/show_bug.cgi?id=2268268\nNOTE: https://lists.gnupg.org/pipermail/gcrypt-devel/2024-March/005607.html\nNOTE: https://github.com/tomato42/marvin-toolkit/tree/master/example/libgcrypt\nNOTE: https://people.redhat.com/~hkario/marvin/", "related_urls": [], "occurrence_count": 0, "reachable_flows": 0}
{"id": "CVE-2024-28863", "package": "npm:tar", "purl": "pkg:npm/tar@6.2.1", "package_type": "npm", "package_usage": "N/A", "version": "6.2.1", "fix_version": "6.2.1", "severity": "MEDIUM", "cvss_score": "6.5", "short_description": "# Denial of service while parsing a tar file due to lack of folders count validation\n## Description: \nDuring some analysis today on npm's `node-tar` package I came across the folder creation process, Basicly if you provide node-tar with a path like this `./a/b/c/foo.txt` it would create every folder and sub-folder here a, b and c until it reaches the last folder to create `foo.txt`, In-this case I noticed that there's no validation at all on the amount of folders being created, that said we're actually able to CPU and memory consume the system running node-tar and even crash the nodejs client within few seconds of running it using a path with too many sub-folders inside\n\n## Steps To Reproduce:\nYou can reproduce this issue by downloading the tar file I provided in the resources and using node-tar to extract it, you should get the same behavior as the video\n\n## Proof Of Concept:\nHere's a [video](https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/3i7uojw8s52psar6pg8zkdo4h9io?response-content-disposition=attachment%3B%20filename%3D%22tar-dos-poc.webm%22%3B%20filename%2A%3DUTF-8%27%27tar-dos-poc.webm&response-content-type=video%2Fwebm&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQSWWGDXHA%2F20240312%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20240312T080103Z&X-Amz-Expires=3600&X-Amz-Security-Token=IQoJb3JpZ2luX2VjEDcaCXVzLXdlc3QtMiJHMEUCID3xYDc6emXVPOg8iVR5dVk0u3gguTPIDJ0OIE%2BKxj17AiEAi%2BGiay1gGMWhH%2F031fvMYnSsa8U7CnpZpxvFAYqNRwgqsQUIQBADGgwwMTM2MTkyNzQ4NDkiDAaj6OgUL3gg4hhLLCqOBUUrOgWSqaK%2FmxN6nKRvB4Who3LIyzswFKm9LV94GiSVFP3zXYA480voCmAHTg7eBL7%2BrYgV2RtXbhF4aCFMCN3qu7GeXkIdH7xwVMi9zXHkekviSKZ%2FsZtVVjn7RFqOCKhJl%2FCoiLQJuDuju%2FtfdTGZbEbGsPgKHoILYbRp81K51zeRL21okjsOehmypkZzq%2BoGrXIX0ynPOKujxw27uqdF4T%2BF9ynodq01vGgwgVBEjHojc4OKOfr1oW5b%2FtGVV59%2BOBVI1hqIKHRG0Ed4SWmp%2BLd1hazGuZPvp52szmegnOj5qr3ubppnKL242bX%2FuAnQKzKK0HpwolqXjsuEeFeM85lxhqHV%2B1BJqaqSHHDa0HUMLZistMRshRlntuchcFQCR6HBa2c8PSnhpVC31zMzvYMfKsI12h4HB6l%2FudrmNrvmH4LmNpi4dZFcio21DzKj%2FRjWmxjH7l8egDyG%2FIgPMY6Ls4IiN7aR1jijYTrBCgPUUHets3BFvqLzHtPFnG3B7%2FYRPnhCLu%2FgzvKN3F8l38KqeTNMHJaxkuhCvEjpFB2SJbi2QZqZZbLj3xASqXoogzbsyPp0Tzp0tH7EKDhPA7H6wwiZukXfFhhlYzP8on9fO2Ajz%2F%2BTDkDjbfWw4KNJ0cFeDsGrUspqQZb5TAKlUge7iOZEc2TZ5uagatSy9Mg08E4nImBSE5QUHDc7Daya1gyqrETMDZBBUHH2RFkGA9qMpEtNrtJ9G%2BPedz%2FpPY1hh9OCp9Pg1BrX97l3SfVzlAMRfNibhywq6qnE35rVnZi%2BEQ1UgBjs9jD%2FQrW49%2FaD0oUDojVeuFFryzRnQxDbKtYgonRcItTvLT5Y0xaK9P0u6H1197%2FMk3XxmjD9%2Fb%2BvBjqxAQWWkKiIxpC1oHEWK9Jt8UdJ39xszDBGpBqjB6Tvt5ePAXSyX8np%2FrBi%2BAPx06O0%2Ba7pU4NmH800EVXxxhgfj9nMw3CeoUIdxorVKtU2Mxw%2FLaAiPgxPS4rqkt65NF7eQYfegcSYDTm2Z%2BHPbz9HfCaVZ28Zqeko6sR%2F29ML4bguqVvHAM4mWPLNDXH33mjG%2BuzLi8e1BF7tNveg2X9G%2FRdcMkojwKYbu6xN3M6aX2alQg%3D%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=1e8235d885f1d61529b7d6b23ea3a0780c300c91d86e925dd8310d5b661ddbe2) show-casing the exploit: \n\n## Impact\n\nDenial of service by crashing the nodejs client when attempting to parse a tar archive, make it run out of heap memory and consuming server CPU and memory resources\n\n## Report resources\n[payload.txt](https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/1e83ayb5dd3350fvj3gst0mqixwk?response-content-disposition=attachment%3B%20filename%3D%22payload.txt%22%3B%20filename%2A%3DUTF-8%27%27payload.txt&response-content-type=text%2Fplain&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQSWWGDXHA%2F20240312%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20240312T080103Z&X-Amz-Expires=3600&X-Amz-Security-Token=IQoJb3JpZ2luX2VjEDcaCXVzLXdlc3QtMiJHMEUCID3xYDc6emXVPOg8iVR5dVk0u3gguTPIDJ0OIE%2BKxj17AiEAi%2BGiay1gGMWhH%2F031fvMYnSsa8U7CnpZpxvFAYqNRwgqsQUIQBADGgwwMTM2MTkyNzQ4NDkiDAaj6OgUL3gg4hhLLCqOBUUrOgWSqaK%2FmxN6nKRvB4Who3LIyzswFKm9LV94GiSVFP3zXYA480voCmAHTg7eBL7%2BrYgV2RtXbhF4aCFMCN3qu7GeXkIdH7xwVMi9zXHkekviSKZ%2FsZtVVjn7RFqOCKhJl%2FCoiLQJuDuju%2FtfdTGZbEbGsPgKHoILYbRp81K51zeRL21okjsOehmypkZzq%2BoGrXIX0ynPOKujxw27uqdF4T%2BF9ynodq01vGgwgVBEjHojc4OKOfr1oW5b%2FtGVV59%2BOBVI1hqIKHRG0Ed4SWmp%2BLd1hazGuZPvp52szmegnOj5qr3ubppnKL242bX%2FuAnQKzKK0HpwolqXjsuEeFeM85lxhqHV%2B1BJqaqSHHDa0HUMLZistMRshRlntuchcFQCR6HBa2c8PSnhpVC31zMzvYMfKsI12h4HB6l%2FudrmNrvmH4LmNpi4dZFcio21DzKj%2FRjWmxjH7l8egDyG%2FIgPMY6Ls4IiN7aR1jijYTrBCgPUUHets3BFvqLzHtPFnG3B7%2FYRPnhCLu%2FgzvKN3F8l38KqeTNMHJaxkuhCvEjpFB2SJbi2QZqZZbLj3xASqXoogzbsyPp0Tzp0tH7EKDhPA7H6wwiZukXfFhhlYzP8on9fO2Ajz%2F%2BTDkDjbfWw4KNJ0cFeDsGrUspqQZb5TAKlUge7iOZEc2TZ5uagatSy9Mg08E4nImBSE5QUHDc7Daya1gyqrETMDZBBUHH2RFkGA9qMpEtNrtJ9G%2BPedz%2FpPY1hh9OCp9Pg1BrX97l3SfVzlAMRfNibhywq6qnE35rVnZi%2BEQ1UgBjs9jD%2FQrW49%2FaD0oUDojVeuFFryzRnQxDbKtYgonRcItTvLT5Y0xaK9P0u6H1197%2FMk3XxmjD9%2Fb%2BvBjqxAQWWkKiIxpC1oHEWK9Jt8UdJ39xszDBGpBqjB6Tvt5ePAXSyX8np%2FrBi%2BAPx06O0%2Ba7pU4NmH800EVXxxhgfj9nMw3CeoUIdxorVKtU2Mxw%2FLaAiPgxPS4rqkt65NF7eQYfegcSYDTm2Z%2BHPbz9HfCaVZ28Zqeko6sR%2F29ML4bguqVvHAM4mWPLNDXH33mjG%2BuzLi8e1BF7tNveg2X9G%2FRdcMkojwKYbu6xN3M6aX2alQg%3D%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=bad9fe731f05a63a950f99828125653a8c1254750fe0ca7be882e89ecdd449ae)\n[archeive.tar.gz](https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/ymkuh4xnfdcf1soeyi7jc2x4yt2i?response-content-disposition=attachment%3B%20filename%3D%22archive.tar.gz%22%3B%20filename%2A%3DUTF-8%27%27archive.tar.gz&response-content-type=application%2Fx-tar&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQSWWGDXHA%2F20240312%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20240312T080103Z&X-Amz-Expires=3600&X-Amz-Security-Token=IQoJb3JpZ2luX2VjEDcaCXVzLXdlc3QtMiJHMEUCID3xYDc6emXVPOg8iVR5dVk0u3gguTPIDJ0OIE%2BKxj17AiEAi%2BGiay1gGMWhH%2F031fvMYnSsa8U7CnpZpxvFAYqNRwgqsQUIQBADGgwwMTM2MTkyNzQ4NDkiDAaj6OgUL3gg4hhLLCqOBUUrOgWSqaK%2FmxN6nKRvB4Who3LIyzswFKm9LV94GiSVFP3zXYA480voCmAHTg7eBL7%2BrYgV2RtXbhF4aCFMCN3qu7GeXkIdH7xwVMi9zXHkekviSKZ%2FsZtVVjn7RFqOCKhJl%2FCoiLQJuDuju%2FtfdTGZbEbGsPgKHoILYbRp81K51zeRL21okjsOehmypkZzq%2BoGrXIX0ynPOKujxw27uqdF4T%2BF9ynodq01vGgwgVBEjHojc4OKOfr1oW5b%2FtGVV59%2BOBVI1hqIKHRG0Ed4SWmp%2BLd1hazGuZPvp52szmegnOj5qr3ubppnKL242bX%2FuAnQKzKK0HpwolqXjsuEeFeM85lxhqHV%2B1BJqaqSHHDa0HUMLZistMRshRlntuchcFQCR6HBa2c8PSnhpVC31zMzvYMfKsI12h4HB6l%2FudrmNrvmH4LmNpi4dZFcio21DzKj%2FRjWmxjH7l8egDyG%2FIgPMY6Ls4IiN7aR1jijYTrBCgPUUHets3BFvqLzHtPFnG3B7%2FYRPnhCLu%2FgzvKN3F8l38KqeTNMHJaxkuhCvEjpFB2SJbi2QZqZZbLj3xASqXoogzbsyPp0Tzp0tH7EKDhPA7H6wwiZukXfFhhlYzP8on9fO2Ajz%2F%2BTDkDjbfWw4KNJ0cFeDsGrUspqQZb5TAKlUge7iOZEc2TZ5uagatSy9Mg08E4nImBSE5QUHDc7Daya1gyqrETMDZBBUHH2RFkGA9qMpEtNrtJ9G%2BPedz%2FpPY1hh9OCp9Pg1BrX97l3SfVzlAMRfNibhywq6qnE35rVnZi%2BEQ1UgBjs9jD%2FQrW49%2FaD0oUDojVeuFFryzRnQxDbKtYgonRcItTvLT5Y0xaK9P0u6H1197%2FMk3XxmjD9%2Fb%2BvBjqxAQWWkKiIxpC1oHEWK9Jt8UdJ39xszDBGpBqjB6Tvt5ePAXSyX8np%2FrBi%2BAPx06O0%2Ba7pU4NmH800EVXxxhgfj9nMw3CeoUIdxorVKtU2Mxw%2FLaAiPgxPS4rqkt65NF7eQYfegcSYDTm2Z%2BHPbz9HfCaVZ28Zqeko6sR%2F29ML4bguqVvHAM4mWPLNDXH33mjG%2BuzLi8e1BF7tNveg2X9G%2FRdcMkojwKYbu6xN3M6aX2alQg%3D%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=5e2c0d4b4de40373ac0fe91908c2659141a6dd4ab850271cc26042a3885c82ea)\n\n## Note\nThis report was originally reported to GitHub bug bounty program, they asked me to report it to you a month ago", "related_urls": ["https://github.com/isaacs/node-tar/security/advisories/GHSA-f5x3-32g6-xq36", "https://nvd.nist.gov/vuln/detail/CVE-2024-28863", "https://github.com/isaacs/node-tar/commit/fe8cd57da5686f8695415414bda49206a545f7f7", "https://github.com/isaacs/node-tar"], "occurrence_count": 0, "reachable_flows": 0}
{"id": "CVE-2012-6656", "package": "suse:pam-modules", "purl": "suse:pam-modules", "package_type": "suse", "package_usage": "N/A", "version": null, "fix_version": "11-1.18.1", "severity": "MEDIUM", "cvss_score": "5.0", "short_description": "iconvdata/ibm930.c in GNU C Library (aka glibc) before 2.16 allows context-dependent attackers to cause a denial of service (out-of-bounds read) via a multibyte character value of \"0xffff\" to the iconv function when converting IBM930 encoded data to UTF-8.", "related_urls": ["https://www.suse.com/security/cve/CVE-2012-6656.html", "https://bugzilla.suse.com/894556", "https://bugzilla.suse.com/903057"], "occurrence_count": 0, "reachable_flows": 0}
{"id": "CVE-2024-21485", "package": "pypi:dash", "purl": "pypi:dash", "package_type": "pypi", "package_usage": "N/A", "version": null, "fix_version": null, "severity": "MEDIUM", "cvss_score": "6.5", "short_description": "# Dash apps vulnerable to Cross-site Scripting\nVersions of the package dash-core-components before 2.13.0; versions of the package dash-core-components before 2.0.0; versions of the package dash before 2.15.0; versions of the package dash-html-components before 2.0.0; versions of the package dash-html-components before 2.0.16 are vulnerable to Cross-site Scripting (XSS) when the href of the a tag is controlled by an adversary. An authenticated attacker who stores a view that exploits this vulnerability could steal the data that's visible to another user who opens that view - not just the data already included on the page, but they could also, in theory, make additional requests and access other data accessible to this user. In some cases, they could also steal the access tokens of that user, which would allow the attacker to act as that user, including viewing other apps and resources hosted on the same server. \n\n**Note:** \n\nThis is only exploitable in Dash apps that include some mechanism to store user input to be reloaded by a different user.\n\n## Related CVE(s)\nCVE-2024-21485, PYSEC-2024-35", "related_urls": ["https://nvd.nist.gov/vuln/detail/CVE-2024-21485", "https://github.com/plotly/dash/issues/2729", "https://github.com/plotly/dash/pull/2732", "https://github.com/plotly/dash/commit/9920073c9a8619ae8f90fcec1924f2f3a4332a8c", "https://github.com/plotly/dash", "https://github.com/plotly/dash/releases/tag/v2.15.0", "https://github.com/pypa/advisory-database/tree/main/vulns/dash/PYSEC-2024-35.yaml", "https://security.snyk.io/vuln/SNYK-JS-DASHCORECOMPONENTS-6183084", "https://security.snyk.io/vuln/SNYK-JS-DASHHTMLCOMPONENTS-6226337", "https://security.snyk.io/vuln/SNYK-PYTHON-DASH-6226335", "https://security.snyk.io/vuln/SNYK-PYTHON-DASHCORECOMPONENTS-6226334", "https://security.snyk.io/vuln/SNYK-PYTHON-DASHHTMLCOMPONENTS-6226336"], "occurrence_count": 0, "reachable_flows": 0}
{"id": "CVE-2012-3406", "package": "suse:pam-modules", "purl": "suse:pam-modules", "package_type": "suse", "package_usage": "N/A", "version": null, "fix_version": "11-1.18.1", "severity": "MEDIUM", "cvss_score": "5.0", "short_description": "The vfprintf function in stdio-common/vfprintf.c in GNU C Library (aka glibc) 2.5, 2.12, and probably other versions does not \"properly restrict the use of\" the alloca function when allocating the SPECS array, which allows context-dependent attackers to bypass the FORTIFY_SOURCE format-string protection mechanism and cause a denial of service (crash) or possibly execute arbitrary code via a crafted format string using positional parameters and a large number of format specifiers, a different vulnerability than CVE-2012-3404 and CVE-2012-3405.", "related_urls": ["https://www.suse.com/security/cve/CVE-2012-3406.html", "https://bugzilla.suse.com/770891", "https://bugzilla.suse.com/826666"], "occurrence_count": 0, "reachable_flows": 0}
{"id": "CVE-2023-2602", "package": "debian:libcap2", "purl": "debian:libcap2", "package_type": "debian", "package_usage": "N/A", "version": null, "fix_version": "2.66-4", "severity": "MEDIUM", "cvss_score": "5.0", "short_description": "A vulnerability was found in the pthread_create function in libcap.\t...\nNOTE: https://sites.google.com/site/fullycapable/release-notes-for-libcap#h.iuvg7sbjg8pe\nNOTE: https://www.x41-dsec.de/static/reports/X41-libcap-Code-Review-2023-OSTIF-Final-Report.pdf\nNOTE: https://www.openwall.com/lists/oss-security/2023/05/15/4\nNOTE: Fixed by: https://git.kernel.org/pub/scm/libs/libcap/libcap.git/commit/?id=bc6b36682f188020ee4770fae1d41bde5b2c97bb (libcap-2.69)", "related_urls": [], "occurrence_count": 0, "reachable_flows": 0}
{"id": "CVE-2015-8860", "package": "npm:tar", "purl": "pkg:npm/tar@6.2.1", "package_type": "npm", "package_usage": "N/A", "version": "6.2.1", "fix_version": "2.0.0", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# Symlink Arbitrary File Overwrite in tar\nVersions of `tar` prior to 2.0.0 are affected by an arbitrary file write vulnerability. The vulnerability occurs because `tar` does not verify that extracted symbolic links to not resolve to targets outside of the extraction root directory.\n\n\n\n## Recommendation\n\nUpdate to version 2.0.0 or later", "related_urls": ["https://nvd.nist.gov/vuln/detail/CVE-2015-8860", "https://github.com/advisories/GHSA-gfjr-3jmm-4g9v", "https://github.com/npm/npm", "https://github.com/npm/npm/releases/tag/v2.7.5", "https://www.npmjs.com/advisories/57", "http://www.openwall.com/lists/oss-security/2016/04/20/11"], "occurrence_count": 0, "reachable_flows": 0}
{"id": "CVE-2022-0563", "package": "debian:util-linux", "purl": "debian:util-linux", "package_type": "debian", "package_usage": "N/A", "version": null, "fix_version": "", "severity": "LOW", "cvss_score": "2.0", "short_description": "A flaw was found in the util-linux chfn and chsh utilities when compil ...\nNOTE: https://bugzilla.redhat.com/show_bug.cgi?id=2053151\nNOTE: https://lore.kernel.org/util-linux/20220214110609.msiwlm457ngoic6w@ws.net.home/T/#u\nNOTE: https://github.com/util-linux/util-linux/commit/faa5a3a83ad0cb5e2c303edbfd8cd823c9d94c17\nNOTE: util-linux in Debian does build with readline support but chfn and chsh are provided\nNOTE: by src:shadow and util-linux is configured with --disable-chfn-chsh", "related_urls": [], "occurrence_count": 0, "reachable_flows": 0}
{"id": "CVE-2024-28085", "package": "debian:util-linux", "purl": "debian:util-linux", "package_type": "debian", "package_usage": "N/A", "version": null, "fix_version": "2.39.3-11", "severity": "MEDIUM", "cvss_score": "5.0", "short_description": "wall in util-linux through 2.40, often installed with setgid tty permi ...\nNOTE: https://www.openwall.com/lists/oss-security/2024/03/27/5\nNOTE: https://github.com/util-linux/util-linux/commit/404b0781f52f7c045ca811b2dceec526408ac253 (v2.40)", "related_urls": [], "occurrence_count": 0, "reachable_flows": 0}
{"id": "CVE-2023-44270", "package": "npm:postcss", "purl": "pkg:npm/postcss@8.4.21", "package_type": "npm", "package_usage": "N/A", "version": "8.4.21", "fix_version": "8.4.31", "severity": "MEDIUM", "cvss_score": "5.3", "short_description": "# PostCSS line return parsing error\nAn issue was discovered in PostCSS before 8.4.31. It affects linters using PostCSS to parse external Cascading Style Sheets (CSS). There may be `\r` discrepancies, as demonstrated by `@font-face{ font:(\r/*);}` in a rule.\n\nThis vulnerability affects linters using PostCSS to parse external untrusted CSS. An attacker can prepare CSS in such a way that it will contains parts parsed by PostCSS as a CSS comment. After processing by PostCSS, it will be included in the PostCSS output in CSS nodes (rules, properties) despite being originally included in a comment.", "related_urls": ["https://nvd.nist.gov/vuln/detail/CVE-2023-44270", "https://github.com/github/advisory-database/issues/2820", "https://github.com/postcss/postcss/commit/58cc860b4c1707510c9cd1bc1fa30b423a9ad6c5", "https://github.com/postcss/postcss", "https://github.com/postcss/postcss/blob/main/lib/tokenize.js#L25", "https://github.com/postcss/postcss/releases/tag/8.4.31"], "occurrence_count": 0, "reachable_flows": 0}
{"id": "GHSA-5rrq-pxf6-6jx5", "package": "npm:node-forge", "purl": "pkg:npm/node-forge@0.7.6", "package_type": "npm", "package_usage": "N/A", "version": "0.7.6", "fix_version": "1.3.0", "severity": "LOW", "cvss_score": "2.0", "short_description": "# Prototype Pollution in node-forge debug API.\n### Impact\nThe `forge.debug` API had a potential prototype pollution issue if called with untrusted input. The API was only used for internal debug purposes in a safe way and never documented or advertised.\tIt is suspected that uses of this API, if any exist, would likely not have used untrusted inputs in a vulnerable way.\n\n### Patches\nThe `forge.debug` API and related functions were removed in 1.0.0.\n\n### Workarounds\nDon't use the `forge.debug` API directly or indirectly with untrusted input.\n\n### References\n- https://www.huntr.dev/bounties/1-npm-node-forge/\n\n### For more information\nIf you have any questions or comments about this advisory:\n* Open an issue in [forge](https://github.com/digitalbazaar/forge).\n* Email us at support@digitalbazaar.com.", "related_urls": ["https://github.com/digitalbazaar/forge/security/advisories/GHSA-5rrq-pxf6-6jx5", "https://github.com/digitalbazaar/forge"], "occurrence_count": 0, "reachable_flows": 0}
{"id": "CVE-2014-6040", "package": "suse:pam-modules", "purl": "suse:pam-modules", "package_type": "suse", "package_usage": "N/A", "version": null, "fix_version": "11-1.18.1", "severity": "MEDIUM", "cvss_score": "5.0", "short_description": "GNU C Library (aka glibc) before 2.20 allows context-dependent attackers to cause a denial of service (out-of-bounds read and crash) via a multibyte character value of \"0xffff\" to the iconv function when converting (1) IBM933, (2) IBM935, (3) IBM937, (4) IBM939, or (5) IBM1364 encoded data to UTF-8.", "related_urls": ["https://www.suse.com/security/cve/CVE-2014-6040.html", "https://bugzilla.suse.com/894553", "https://bugzilla.suse.com/903057", "https://bugzilla.suse.com/916222"], "occurrence_count": 0, "reachable_flows": 0}
{"id": "CVE-2024-34342", "package": "npm:pdfjs-dist", "purl": "pkg:npm/pdfjs-dist@2.16.105", "package_type": "npm", "package_usage": "N/A", "version": "2.16.105", "fix_version": "4.2.67", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# PDF.js vulnerable to arbitrary JavaScript execution upon opening a malicious PDF\n### Impact\nIf pdf.js is used to load a malicious PDF, and PDF.js is configured with `isEvalSupported` set to `true` (which is the default value), unrestricted attacker-controlled JavaScript will be executed in the context of the hosting domain.\n\n### Patches\nThe patch removes the use of `eval`:\nhttps://github.com/mozilla/pdf.js/pull/18015\n\n### Workarounds\nSet the option `isEvalSupported` to `false`. \n\n### References\nhttps://bugzilla.mozilla.org/show_bug.cgi?id=1893645\n\n## Related CVE(s)\nCVE-2024-34342, CVE-2024-4367, GHSA-87hq-q4gp-9wr4", "related_urls": ["https://github.com/mozilla/pdf.js/security/advisories/GHSA-wgrm-67xf-hhpq", "https://github.com/mozilla/pdf.js/pull/18015", "https://github.com/mozilla/pdf.js/commit/85e64b5c16c9aaef738f421733c12911a441cec6", "https://bugzilla.mozilla.org/show_bug.cgi?id=1893645", "https://github.com/mozilla/pdf.js"], "occurrence_count": 0, "reachable_flows": 0}
{"id": "CVE-2012-3404", "package": "suse:pam-modules", "purl": "suse:pam-modules", "package_type": "suse", "package_usage": "N/A", "version": null, "fix_version": "11-1.18.1", "severity": "MEDIUM", "cvss_score": "5.0", "short_description": "The vfprintf function in stdio-common/vfprintf.c in libc in GNU C Library (aka glibc) 2.12 and other versions does not properly calculate a buffer length, which allows context-dependent attackers to bypass the FORTIFY_SOURCE format-string protection mechanism and cause a denial of service (stack corruption and crash) via a format string that uses positional parameters and many format specifiers.", "related_urls": ["https://www.suse.com/security/cve/CVE-2012-3404.html", "https://bugzilla.suse.com/770891"], "occurrence_count": 0, "reachable_flows": 0}
{"id": "CVE-2023-4039", "package": "suse:libgcc_s1", "purl": "suse:libgcc_s1", "package_type": "suse", "package_usage": "N/A", "version": null, "fix_version": "13.2.1+git7813-150000.1.6.1", "severity": "HIGH", "cvss_score": "7.5", "short_description": "**DISPUTED**A failure in the -fstack-protector feature in GCC-based toolchains \nthat target AArch64 allows an attacker to exploit an existing buffer \noverflow in dynamically-sized local variables in your application \nwithout this being detected. This stack-protector failure only applies \nto C99-style dynamically-sized local variables or those created using \nalloca(). The stack-protector operates as intended for statically-sized \nlocal variables.\n\nThe default behavior when the stack-protector \ndetects an overflow is to terminate your application, resulting in \ncontrolled loss of availability. An attacker who can exploit a buffer \noverflow without triggering the stack-protector might be able to change \nprogram flow control to cause an uncontrolled loss of availability or to\n go further and affect confidentiality or integrity. NOTE: The GCC project argues that this is a missed hardening bug and not a vulnerability by itself.", "related_urls": ["https://www.suse.com/security/cve/CVE-2023-4039.html", "https://bugzilla.suse.com/1214052"], "occurrence_count": 0, "reachable_flows": 0}
{"id": "CVE-2021-37713", "package": "npm:tar", "purl": "pkg:npm/tar@6.2.1", "package_type": "npm", "package_usage": "N/A", "version": "6.2.1", "fix_version": "4.4.18", "severity": "HIGH", "cvss_score": "8.2", "short_description": "# Arbitrary File Creation/Overwrite on Windows via insufficient relative path sanitization\n### Impact\n\nArbitrary File Creation, Arbitrary File Overwrite, Arbitrary Code Execution\n\nnode-tar aims to guarantee that any file whose location would be outside of the extraction target directory is not extracted. This is, in part, accomplished by sanitizing absolute paths of entries within the archive, skipping archive entries that contain `..` path portions, and resolving the sanitized paths against the extraction target directory.\n\nThis logic was insufficient on Windows systems when extracting tar files that contained a path that was not an absolute path, but specified a drive letter different from the extraction target, such as `C:some\\path`.\tIf the drive letter does not match the extraction target, for example `D:\\extraction\\dir`, then the result of `path.resolve(extractionDirectory, entryPath)` would resolve against the current working directory on the `C:` drive, rather than the extraction target directory.\n\nAdditionally, a `..` portion of the path could occur immediately after the drive letter, such as `C:../foo`, and was not properly sanitized by the logic that checked for `..` within the normalized and split portions of the path.\n\nThis only affects users of `node-tar` on Windows systems.\n\n### Patches\n\n4.4.18 || 5.0.10 || 6.1.9\n\n### Workarounds\n\nThere is no reasonable way to work around this issue without performing the same path normalization procedures that node-tar now does.\n\nUsers are encouraged to upgrade to the latest patched versions of node-tar, rather than attempt to sanitize paths themselves.\n\n### Fix\n\nThe fixed versions strip path roots from all paths prior to being resolved against the extraction target folder, even if such paths are not \"absolute\".\n\nAdditionally, a path starting with a drive letter and then two dots, like `c:../`, would bypass the check for `..` path portions.\tThis is checked properly in the patched versions.\n\nFinally, a defense in depth check is added, such that if the `entry.absolute` is outside of the extraction taret, and we are not in preservePaths:true mode, a warning is raised on that entry, and it is skipped.\tCurrently, it is believed that this check is redundant, but it did catch some oversights in development.", "related_urls": ["https://github.com/npm/node-tar/security/advisories/GHSA-5955-9wpr-37jh", "https://nvd.nist.gov/vuln/detail/CVE-2021-37713", "https://github.com/isaacs/node-tar/commit/52b09e309bcae0c741a7eb79a17ef36e7828b946", "https://github.com/isaacs/node-tar/commit/82eac952f7c10765969ed464e549375854b26edc", "https://github.com/isaacs/node-tar/commit/875a37e3ec031186fc6599f6807341f56c584598", "https://cert-portal.siemens.com/productcert/pdf/ssa-389290.pdf", "https://github.com/npm/node-tar", "https://www.npmjs.com/package/tar", "https://www.oracle.com/security-alerts/cpuoct2021.html"], "occurrence_count": 0, "reachable_flows": 0}
{"id": "CVE-2023-4039", "package": "suse:libstdc++6", "purl": "suse:libstdc++6", "package_type": "suse", "package_usage": "N/A", "version": null, "fix_version": "13.2.1+git7813-150000.1.6.1", "severity": "HIGH", "cvss_score": "7.5", "short_description": "**DISPUTED**A failure in the -fstack-protector feature in GCC-based toolchains \nthat target AArch64 allows an attacker to exploit an existing buffer \noverflow in dynamically-sized local variables in your application \nwithout this being detected. This stack-protector failure only applies \nto C99-style dynamically-sized local variables or those created using \nalloca(). The stack-protector operates as intended for statically-sized \nlocal variables.\n\nThe default behavior when the stack-protector \ndetects an overflow is to terminate your application, resulting in \ncontrolled loss of availability. An attacker who can exploit a buffer \noverflow without triggering the stack-protector might be able to change \nprogram flow control to cause an uncontrolled loss of availability or to\n go further and affect confidentiality or integrity. NOTE: The GCC project argues that this is a missed hardening bug and not a vulnerability by itself.", "related_urls": ["https://www.suse.com/security/cve/CVE-2023-4039.html", "https://bugzilla.suse.com/1214052"], "occurrence_count": 0, "reachable_flows": 0}
{"id": "CVE-2017-20165", "package": "npm:debug", "purl": "pkg:npm/debug@3.2.7", "package_type": "npm", "package_usage": "N/A", "version": "3.2.7", "fix_version": "2.6.9", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# debug Inefficient Regular Expression Complexity vulnerability\nA vulnerability classified as problematic has been found in debug-js debug up to 3.0.x. This affects the function useColors of the file src/node.js. The manipulation of the argument str leads to inefficient regular expression complexity. Upgrading to version 3.1.0 is able to address this issue. The name of the patch is c38a0166c266a679c8de012d4eaccec3f944e685. It is recommended to upgrade the affected component. The identifier VDB-217665 was assigned to this vulnerability. The patch has been backported to the 2.6.x branch in version 2.6.9.", "related_urls": ["https://nvd.nist.gov/vuln/detail/CVE-2017-20165", "https://github.com/debug-js/debug/pull/504", "https://github.com/debug-js/debug/commit/c38a0166c266a679c8de012d4eaccec3f944e685", "https://github.com/debug-js/debug/commit/f53962e944a87e6ca9bb622a2a12dffc22a9bb5a", "https://github.com/debug-js/debug", "https://github.com/debug-js/debug/releases/tag/2.6.9", "https://github.com/debug-js/debug/releases/tag/3.1.0", "https://vuldb.com/?ctiid.217665", "https://vuldb.com/?id.217665"], "occurrence_count": 0, "reachable_flows": 0}
{"id": "CVE-2015-1472", "package": "suse:pam-modules", "purl": "suse:pam-modules", "package_type": "suse", "package_usage": "N/A", "version": null, "fix_version": "11-1.18.1", "severity": "MEDIUM", "cvss_score": "5.0", "short_description": "The ADDW macro in stdio-common/vfscanf.c in the GNU C Library (aka glibc or libc6) before 2.21 does not properly consider data-type size during memory allocation, which allows context-dependent attackers to cause a denial of service (buffer overflow) or possibly have unspecified other impact via a long line containing wide characters that are improperly handled in a wscanf call.", "related_urls": ["https://www.suse.com/security/cve/CVE-2015-1472.html", "https://bugzilla.suse.com/916222", "https://bugzilla.suse.com/920341", "https://bugzilla.suse.com/922243"], "occurrence_count": 0, "reachable_flows": 0}
{"id": "ALSA-2023:0959", "package": "almalinux:tar", "purl": "almalinux:tar", "package_type": "almalinux", "package_usage": "N/A", "version": null, "fix_version": "1.34", "severity": "MEDIUM", "cvss_score": "5.0", "short_description": "The GNU tar program can save multiple files in an archive and restore files from an archive.\n\nSecurity Fix(es):\n\n* tar: heap buffer overflow at from_header() in list.c via specially crafted checksum (CVE-2022-48303)\n\nFor more details about the security issue(s), including the impact, a CVSS score, acknowledgments, and other related information, refer to the CVE page(s) listed in the References section.", "related_urls": ["https://bugzilla.redhat.com/2149722", "https://access.redhat.com/security/cve/CVE-2022-48303", "https://access.redhat.com/errata/RHSA-2023:0959", "https://errata.almalinux.org/9/ALSA-2023-0959.html"], "occurrence_count": 0, "reachable_flows": 0}
{"id": "CVE-2014-5119", "package": "suse:pam-modules", "purl": "suse:pam-modules", "package_type": "suse", "package_usage": "N/A", "version": null, "fix_version": "11-1.18.1", "severity": "HIGH", "cvss_score": "7.5", "short_description": "Off-by-one error in the __gconv_translit_find function in gconv_trans.c in GNU C Library (aka glibc) allows context-dependent attackers to cause a denial of service (crash) or execute arbitrary code via vectors related to the CHARSET environment variable and gconv transliteration modules.", "related_urls": ["https://www.suse.com/security/cve/CVE-2014-5119.html", "https://bugzilla.suse.com/892073", "https://bugzilla.suse.com/903057", "https://bugzilla.suse.com/916222"], "occurrence_count": 0, "reachable_flows": 0}
{"id": "CVE-2012-4412", "package": "suse:pam-modules", "purl": "suse:pam-modules", "package_type": "suse", "package_usage": "N/A", "version": null, "fix_version": "11-1.18.1", "severity": "HIGH", "cvss_score": "7.5", "short_description": "Integer overflow in string/strcoll_l.c in the GNU C Library (aka glibc or libc6) 2.17 and earlier allows context-dependent attackers to cause a denial of service (crash) or possibly execute arbitrary code via a long string, which triggers a heap-based buffer overflow.", "related_urls": ["https://www.suse.com/security/cve/CVE-2012-4412.html", "https://bugzilla.suse.com/779320", "https://bugzilla.suse.com/848783", "https://bugzilla.suse.com/882910", "https://bugzilla.suse.com/920169", "https://bugzilla.suse.com/920338"], "occurrence_count": 0, "reachable_flows": 0}
{"id": "CVE-2020-7720", "package": "npm:node-forge", "purl": "pkg:npm/node-forge@0.7.6", "package_type": "npm", "package_usage": "N/A", "version": "0.7.6", "fix_version": "0.10.0", "severity": "CRITICAL", "cvss_score": "9.8", "short_description": "# Prototype Pollution in node-forge\nThe package node-forge before 0.10.0 is vulnerable to Prototype Pollution via the util.setPath function. Note: version 0.10.0 is a breaking change removing the vulnerable functions.\n\n## Related CVE(s)\nCVE-2020-7720, SNYK-JAVA-ORGWEBJARSNPM-609293, SNYK-JS-NODEFORGE-598677", "related_urls": ["https://nvd.nist.gov/vuln/detail/CVE-2020-7720", "https://github.com/digitalbazaar/forge/commit/6a1e3ef74f6eb345bcff1b82184201d1e28b6756", "https://github.com/digitalbazaar/forge", "https://github.com/digitalbazaar/forge/blob/master/CHANGELOG.md", "https://github.com/digitalbazaar/forge/blob/master/CHANGELOG.md#removed", "https://snyk.io/vuln/SNYK-JAVA-ORGWEBJARSNPM-609293", "https://snyk.io/vuln/SNYK-JS-NODEFORGE-598677"], "occurrence_count": 0, "reachable_flows": 0}
{"id": "GHSA-7wwv-vh3v-89cq", "package": "npm:highlight.js", "purl": "pkg:npm/highlight.js@11.10.0", "package_type": "npm", "package_usage": "N/A", "version": "11.10.0", "fix_version": "10.4.1", "severity": "MEDIUM", "cvss_score": "5.0", "short_description": "# ReDOS vulnerabities: multiple grammars\n### Impact: Potential ReDOS vulnerabilities (exponential and polynomial RegEx backtracking)\n\n[oswasp](https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS): \n\n> The Regular expression Denial of Service (ReDoS) is a Denial of Service attack, that exploits the fact that most Regular Expression implementations may reach extreme situations that cause them to work very slowly (exponentially related to input size). An attacker can then cause a program using a Regular Expression to enter these extreme situations and then hang for a very long time.\n\nIf are you are using Highlight.js to highlight user-provided data you are possibly vulnerable.\tOn the client-side (in a browser or Electron environment) risks could include lengthy freezes or crashes... On the server-side infinite freezes could occur... effectively preventing users from accessing your app or service (ie, Denial of Service).\n\nThis is an issue with grammars shipped with the parser (and potentially 3rd party grammars also), not the parser itself. If you are using Highlight.js with any of the following grammars you are vulnerable.\tIf you are using `highlightAuto` to detect the language (and have any of these grammars registered) you are vulnerable. Exponential grammars (C, Perl, JavaScript) are auto-registered when using the common grammar subset/library `require('highlight.js/lib/common')` as of 10.4.0 - see https://cdn.jsdelivr.net/gh/highlightjs/cdn-release@10.4.0/build/highlight.js\n\nAll versions prior to 10.4.1 are vulnerable, including version 9.18.5. \n\n**Grammars with exponential backtracking issues:**\n\n\t- c-like (c, cpp, arduino)\n\t- handlebars (htmlbars)\n\t- gams\n\t- perl\n\t- jboss-cli\n\t- r\n\t- erlang-repl\n\t- powershell\n\t- routeros\n\t- livescript (10.4.0 and 9.18.5 included this fix)\n\t- javascript & typescript (10.4.0 included partial fixes)\n\nAnd of course any aliases of those languages have the same issue. ie: `hpp` is no safer than `cpp`.\n\n**Grammars with polynomial backtracking issues:**\n\n- kotlin\n- gcode\n- d\n- aspectj\n- moonscript\n- coffeescript/livescript\n- csharp\n- scilab\n- crystal\n- elixir\n- basic\n- ebnf\n- ruby\n- fortran/irpf90\n- livecodeserver\n- yaml\n- x86asm\n- dsconfig\n- markdown\n- ruleslanguage\n- xquery\n- sqf\n\nAnd again: any aliases of those languages have the same issue. ie: `ruby` and `rb` share the same ruby issues.\n\n\n### Patches\n\n- Version 10.4.1 resolves these vulnerabilities.\tPlease upgrade.\n\n### Workarounds / Mitigations\n\n- Discontinue use the affected grammars. (or perhaps use only those with poly vs exponential issues)\n- Attempt cherry-picking the grammar fixes into older versions...\n- Attempt using newer CDN versions of any affected languages.\t(ie using an older CDN version of the library with newer CDN grammars).\tYour mileage may vary.\n\n### References\n\n- https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS\n\n### For more information\n\nIf you have any questions or comments about this advisory:\n* Open an issue: https://github.com/highlightjs/highlight.js/issues\n* Email us at [security@highlightjs.com](mailto:security@highlightjs.com)", "related_urls": ["https://github.com/highlightjs/highlight.js/security/advisories/GHSA-7wwv-vh3v-89cq", "https://github.com/highlightjs/highlight.js/commit/373b9d862401162e832ce77305e49b859e110f9c", "https://www.npmjs.com/package/@highlightjs/cdn-assets", "https://www.npmjs.com/package/highlight.js"], "occurrence_count": 0, "reachable_flows": 0}
{"id": "CVE-2013-1914", "package": "suse:pam-modules", "purl": "suse:pam-modules", "package_type": "suse", "package_usage": "N/A", "version": null, "fix_version": "11-1.18.1", "severity": "MEDIUM", "cvss_score": "5.0", "short_description": "Stack-based buffer overflow in the getaddrinfo function in sysdeps/posix/getaddrinfo.c in GNU C Library (aka glibc or libc6) 2.17 and earlier allows remote attackers to cause a denial of service (crash) via a (1) hostname or (2) IP address that triggers a large number of domain conversion results.", "related_urls": ["https://www.suse.com/security/cve/CVE-2013-1914.html", "https://bugzilla.suse.com/813121", "https://bugzilla.suse.com/826666", "https://bugzilla.suse.com/882910", "https://bugzilla.suse.com/941444"], "occurrence_count": 0, "reachable_flows": 0}
{"id": "CVE-2012-0864", "package": "suse:pam-modules", "purl": "suse:pam-modules", "package_type": "suse", "package_usage": "N/A", "version": null, "fix_version": "11-1.18.1", "severity": "MEDIUM", "cvss_score": "5.0", "short_description": "Integer overflow in the vfprintf function in stdio-common/vfprintf.c in glibc 2.14 and other versions allows context-dependent attackers to bypass the FORTIFY_SOURCE protection mechanism, conduct format string attacks, and write to arbitrary memory via a large number of arguments.", "related_urls": ["https://www.suse.com/security/cve/CVE-2012-0864.html", "https://bugzilla.suse.com/747768", "https://bugzilla.suse.com/826666"], "occurrence_count": 0, "reachable_flows": 0}
